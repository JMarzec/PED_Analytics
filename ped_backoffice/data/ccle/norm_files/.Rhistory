add_trace(y = ~Loss, name = "Loss", color = I("blue")) %>%
add_trace(x = ~Gene, y = ~Chr_line, type = 'scatter', name = "Chromosomes", mode = 'lines', line = list(color = "lightgrey", dash = "1px"), hoverinfo = "skip") %>%
layout( title = target.sel, yaxis = list(title = "Fraction of samples"), xaxis = list(title = "Chromosome number", showticklabels = FALSE), annotations = chr_nos, barmode = 'group', bargap = 0, margin = list(l=50, r=50, b=100, t=50, pad=4), autosize = F, legend = list(orientation = 'h', y = 1.07, tracegroupgap=0), showlegend=TRUE)
##### Save the frequency plot as html (PLOTLY)
widget_fn = paste(outFolder,paste0("frequency_plot_",j,"_",i,".html"),sep="/")
htmlwidgets::saveWidget(p, widget_fn)
}
ef = paste(outFolder,"norm_files",cn_files[j],sep = "/")
##### Read file with copy-number data
cnData <- read.table(ef,sep="\t",header=TRUE,row.names=NULL, stringsAsFactors = FALSE)
###### Deal with the duplicated genes
cnData <- duplGenes(cnData)
######  Keep genomic info separately
cnData.pos <- cnData[, c(1:2)]
cnData <- cnData[, c(3:ncol(cnData))]
###### Change chromosomes X and Y to numbers 23 and 24, respectively
cnData.pos$Chromosome[ cnData.pos$Chromosome  %in% "X" ] <- 23
cnData.pos$Chromosome[ cnData.pos$Chromosome %in% "Y" ] <- 24
###### Check samples present in current dataset
selected_samples <- intersect(as.character(annData$Sample_Name),colnames(cnData))
cnData.subset <- cnData[,colnames(cnData) %in% selected_samples]
##### Make sure that the sample order is the same as in the target file
cnData.subset <- cnData.subset[ , selected_samples ]
targets <- subset(annData, Sample_Name %in% colnames(cnData.subset))[,target]
##### This plot is not necessary, it's only to get an idea about the relative linear copy-number values #####
##### Draw histogram of correlation coefficients (PLOTLY)
#p <- plot_ly(x = ~unlist(cnData.subset), type = 'histogram', width = 800, height = 500) %>%
#layout(xaxis = list( title = "Relative linear copy-number values"), yaxis = list( title = "Frequency"), margin = list(l=50, r=50, b=50, t=50, pad=4), autosize = F)
#
##### Save the histogram as html (PLOTLY)
#htmlwidgets::saveWidget(as_widget(p), "cn_hist.html")
#===============================================================================
#    Generate frequency plot for each group separately
#===============================================================================
for(i in 1:length(unique(targets))) {
##### Select samples from the group
target.sel <- unique(sort(targets, decreasing = TRUE))[i]
cnData.subset.sel <- cnData.subset[ targets %in%  target.sel    ]
##### Add genomic info
cnData.subset.sel <- cbind(cnData.pos, cnData.subset.sel)
cnData.subset.sel$Loss=rep(0,length(nrow(cnData.subset.sel)))
cnData.subset.sel$Gain=rep(0,length(nrow(cnData.subset.sel)))
##### Order the data accordingly to genomic postions
cnData.subset.sel = cnData.subset.sel[order(as.numeric(cnData.subset.sel$Chromosome),as.numeric(cnData.subset.sel$Position)),]
##### Count number of samples with gains/losses at each position (segment mean > 0.5 or <= -05, respectively)
gainSum <- rowSums(cnData.subset.sel[,c(3:ncol(cnData.subset.sel))] > 0.5)/(ncol(cnData.subset.sel)-4)
lossSum <- rowSums(cnData.subset.sel[,c(3:ncol(cnData.subset.sel))] <= -0.5)/(ncol(cnData.subset.sel)-4)
##### Get frequency values
cnData.subset.sel[,"Gain"] = gainSum
cnData.subset.sel[,"Loss"] = -lossSum
##### Label chromosomes
chr_bins <- data.matrix(summary(as.factor(cnData.subset.sel$Chromosome)))
chr_bins<- data.frame(chr_bins,row.names(chr_bins) )
colnames(chr_bins) = c("count","Chromosome")
data.chr_bins <- data.frame(unique(cnData.subset.sel$Chromosome))
colnames(data.chr_bins) = c("Chromosome")
chr_annot <- merge(data.chr_bins,chr_bins, by.x="Chromosome", by.y="Chromosome", sort=FALSE)
for(k in 2:length(row.names(chr_annot))) {
chr_annot[k,2] = chr_annot[k-1,2] + chr_annot[k,2]
}
chr_annot[1,3] <- chr_annot[1,2] / 2
for (k in 2:length(row.names(chr_annot))) {
chr_annot[k,3] <- (chr_annot[k,2]+chr_annot[k-1,2])/2
}
##### Create a list with chromosme boundaries info
#levels(chr_annot$Chromosome)[ levels(chr_annot$Chromosome) == 23 ] <- "X"
chr_nos <- list( x = chr_annot[, 3], y = -1.1, text = chr_annot$Chromosome, xref = "x", yref = "y", showarrow = FALSE )
##### Prepare vector to indicate chromosome boundaries
chr_lines <- rep(0, nrow(cnData.subset.sel))
chr_lines[ chr_annot$count - 1 ] <- 1
chr_lines[ chr_annot$count ] <- -1
##### Prepare data for plotting with plotly
data2plot <- data.frame(rownames(cnData.subset.sel), cnData.subset.sel$Loss, cnData.subset.sel$Gain, chr_lines)
colnames(data2plot) <- c("Gene", "Loss", "Gain", "Chr_line")
##### Use the genomic positions order for bars
data2plot$Gene <- factor(data2plot$Gene, levels = data2plot$Gene)
p <- plot_ly(data2plot, x = ~Gene, y = ~Gain, type = 'bar', name = "Gain", color = I("red"), width = 800, height = 400) %>%
add_trace(y = ~Loss, name = "Loss", color = I("blue")) %>%
add_trace(x = ~Gene, y = ~Chr_line, type = 'scatter', name = "Chromosomes", mode = 'lines', line = list(color = "lightgrey", dash = "1px"), hoverinfo = "skip") %>%
layout( title = target.sel, yaxis = list(title = "Fraction of samples"), xaxis = list(title = "Chromosome number", showticklabels = FALSE), annotations = chr_nos, barmode = 'group', bargap = 0, margin = list(l=50, r=50, b=100, t=50, pad=4), autosize = F, legend = list(orientation = 'h', y = 1.07, tracegroupgap=0), showlegend=TRUE)
##### Save the frequency plot as html (PLOTLY)
widget_fn = paste(outFolder,paste0("frequency_plot_",j,"_",i,".html"),sep="/")
htmlwidgets::saveWidget(p, widget_fn)
}
ef = paste(outFolder,"norm_files",cn_files[j],sep = "/")
##### Read file with copy-number data
cnData <- read.table(ef,sep="\t",header=TRUE,row.names=NULL, stringsAsFactors = FALSE)
###### Deal with the duplicated genes
cnData <- duplGenes(cnData)
######  Keep genomic info separately
cnData.pos <- cnData[, c(1:2)]
cnData <- cnData[, c(3:ncol(cnData))]
###### Change chromosomes X and Y to numbers 23 and 24, respectively
cnData.pos$Chromosome[ cnData.pos$Chromosome  %in% "X" ] <- 23
cnData.pos$Chromosome[ cnData.pos$Chromosome %in% "Y" ] <- 24
###### Check samples present in current dataset
selected_samples <- intersect(as.character(annData$Sample_Name),colnames(cnData))
cnData.subset <- cnData[,colnames(cnData) %in% selected_samples]
##### Make sure that the sample order is the same as in the target file
cnData.subset <- cnData.subset[ , selected_samples ]
targets <- subset(annData, Sample_Name %in% colnames(cnData.subset))[,target]
##### This plot is not necessary, it's only to get an idea about the relative linear copy-number values #####
##### Draw histogram of correlation coefficients (PLOTLY)
#p <- plot_ly(x = ~unlist(cnData.subset), type = 'histogram', width = 800, height = 500) %>%
#layout(xaxis = list( title = "Relative linear copy-number values"), yaxis = list( title = "Frequency"), margin = list(l=50, r=50, b=50, t=50, pad=4), autosize = F)
#
##### Save the histogram as html (PLOTLY)
#htmlwidgets::saveWidget(as_widget(p), "cn_hist.html")
#===============================================================================
#    Generate frequency plot for each group separately
#===============================================================================
for(i in 1:length(unique(targets))) {
##### Select samples from the group
target.sel <- unique(sort(targets, decreasing = TRUE))[i]
cnData.subset.sel <- cnData.subset[ targets %in%  target.sel    ]
##### Add genomic info
cnData.subset.sel <- cbind(cnData.pos, cnData.subset.sel)
cnData.subset.sel$Loss=rep(0,length(nrow(cnData.subset.sel)))
cnData.subset.sel$Gain=rep(0,length(nrow(cnData.subset.sel)))
##### Order the data accordingly to genomic postions
cnData.subset.sel = cnData.subset.sel[order(as.numeric(cnData.subset.sel$Chromosome),as.numeric(cnData.subset.sel$Position)),]
##### Count number of samples with gains/losses at each position (segment mean > 0.5 or <= -05, respectively)
gainSum <- rowSums(cnData.subset.sel[,c(3:ncol(cnData.subset.sel))] > 0.5)/(ncol(cnData.subset.sel)-4)
lossSum <- rowSums(cnData.subset.sel[,c(3:ncol(cnData.subset.sel))] <= -0.5)/(ncol(cnData.subset.sel)-4)
##### Get frequency values
cnData.subset.sel[,"Gain"] = gainSum
cnData.subset.sel[,"Loss"] = -lossSum
##### Label chromosomes
chr_bins <- data.matrix(summary(as.factor(cnData.subset.sel$Chromosome)))
chr_bins<- data.frame(chr_bins,row.names(chr_bins) )
colnames(chr_bins) = c("count","Chromosome")
data.chr_bins <- data.frame(unique(cnData.subset.sel$Chromosome))
colnames(data.chr_bins) = c("Chromosome")
chr_annot <- merge(data.chr_bins,chr_bins, by.x="Chromosome", by.y="Chromosome", sort=FALSE)
for(k in 2:length(row.names(chr_annot))) {
chr_annot[k,2] = chr_annot[k-1,2] + chr_annot[k,2]
}
chr_annot[1,3] <- chr_annot[1,2] / 2
for (k in 2:length(row.names(chr_annot))) {
chr_annot[k,3] <- (chr_annot[k,2]+chr_annot[k-1,2])/2
}
##### Create a list with chromosme boundaries info
levels(chr_annot$Chromosome)[ levels(chr_annot$Chromosome) == 23 ] <- "X"
chr_nos <- list( x = chr_annot[, 3], y = -1.1, text = chr_annot$Chromosome, xref = "x", yref = "y", showarrow = FALSE )
##### Prepare vector to indicate chromosome boundaries
chr_lines <- rep(0, nrow(cnData.subset.sel))
chr_lines[ chr_annot$count - 1 ] <- 1
chr_lines[ chr_annot$count ] <- -1
##### Prepare data for plotting with plotly
data2plot <- data.frame(rownames(cnData.subset.sel), cnData.subset.sel$Loss, cnData.subset.sel$Gain, chr_lines)
colnames(data2plot) <- c("Gene", "Loss", "Gain", "Chr_line")
##### Use the genomic positions order for bars
data2plot$Gene <- factor(data2plot$Gene, levels = data2plot$Gene)
p <- plot_ly(data2plot, x = ~Gene, y = ~Gain, type = 'bar', name = "Gain", color = I("red"), width = 800, height = 400) %>%
add_trace(y = ~Loss, name = "Loss", color = I("blue")) %>%
add_trace(x = ~Gene, y = ~Chr_line, type = 'scatter', name = "Chromosomes", mode = 'lines', line = list(color = "lightgrey", dash = "1px"), hoverinfo = "skip") %>%
layout( title = target.sel, yaxis = list(title = "Fraction of samples"), xaxis = list(title = "Chromosome number", showticklabels = FALSE), annotations = chr_nos, barmode = 'group', bargap = 0, margin = list(l=50, r=50, b=100, t=50, pad=4), autosize = F, legend = list(orientation = 'h', y = 1.07, tracegroupgap=0), showlegend=TRUE)
##### Save the frequency plot as html (PLOTLY)
widget_fn = paste(outFolder,paste0("frequency_plot_",j,"_",i,".html"),sep="/")
htmlwidgets::saveWidget(p, widget_fn)
}
setdiff
ef = paste(outFolder,"norm_files",cn_files[j],sep = "/")
##### Read file with copy-number data
cnData <- read.table(ef,sep="\t",header=TRUE,row.names=NULL, stringsAsFactors = FALSE)
###### Deal with the duplicated genes
cnData <- duplGenes(cnData)
setdiff(intersect(as.character(annData$Sample_Name),colnames(cnData)))
setdiff(as.character(annData$Sample_Name),colnames(cnData))
setdiff(colnames(cnData),as.character(annData$Sample_Name))
q()
##### Clear workspace
rm(list=ls())
##### Close any open graphics devices
graphics.off()
### Setting environment for pandoc
Sys.setenv(HOME = "")
#===============================================================================
#    Functions
#===============================================================================
##### Create 'not in' operator
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0
##### Deal with the duplicated genes
duplGenes <- function(expData) {
genesList <- NULL
genesRepl <- NULL
for ( i in 1:nrow(expData) ) {
geneName <- expData[i,1]
##### Distingish duplicated genes by adding duplicate number
if ( geneName %in% genesList ) {
##### Report genes with more than one duplicates
if ( geneName %in% names(genesRepl) ) {
genesRepl[[ geneName ]] = genesRepl[[ geneName ]]+1
geneName <- paste(geneName, "-", genesRepl[[ geneName ]], sep="")
} else {
genesRepl[[ geneName ]] <- 2
geneName <- paste(geneName, "-2", sep="")
}
}
genesList <- c(genesList,geneName)
}
rownames(expData) <- genesList
##### Remove the first column with gene names, which now are used as row names
expData <- expData[, -1]
return(expData)
}
suppressMessages(library(optparse))
cnFile="cn_chr_pos.csv"
outFolder="/Users/marzec01/Desktop/git/PED_bioinformatics_portal/PED_Analytics/ped_backoffice/data/ccle"
cn_files = unlist(strsplit(cnFile, ","))
ef = paste(outFolder,"norm_files",cn_files[j],sep = "/")
j=1
ef = paste(outFolder,"norm_files",cn_files[j],sep = "/")
ef
cnData <- read.table(ef,sep="\t",header=TRUE,row.names=NULL, stringsAsFactors = FALSE)
###### Deal with the duplicated genes
cnData <- duplGenes(cnData)
cnFile="cn.csv"
cn_files = unlist(strsplit(cnFile, ","))
cn_files
ef = paste(outFolder,"norm_files",cn_files[j],sep = "/")
##### Read file with copy-number data
cnData <- read.table(ef,sep="\t",header=TRUE,row.names=NULL, stringsAsFactors = FALSE)
###### Deal with the duplicated genes
cnData <- duplGenes(cnData)
View(cnData)
suppressMessages(library(biomaRt))
mart = useMart(biomart = "ENSEMBL_MART_ENSEMBL",dataset="hsapiens_gene_ensembl",host = "jul2015.archive.ensembl.org")
theFilters = c("chromosome_name","start","end")   ######or illumina_humanht_v3
theAttributes = c("chromosome_name","start_position","end_position")
listAttributes {biomaRt}
listAttributes(mart)
listAttributes(mart)
listFilters(mart)
theFilters = c("hgnc_symbol")   ######or illumina_humanht_v3
theAttributes = c("chromosome_name","start_position","end_position")
new_test1 <- vector()
test1 <- getBM(attributes=theAttributes,filters=theFilters,values=list(rownames(cnData)),mart=mart)
test1
theFilters = c("hgnc_symbol")   ######or illumina_humanht_v3
theAttributes = c("hgnc_symbol", "chromosome_name","start_position","end_position")
new_test1 <- vector()
test1 <- getBM(attributes=theAttributes,filters=theFilters,values=list(rownames(cnData)),mart=mart)
head(test1)
dim(test1)
listFilters(mart)
theFilters = c("hgnc_symbol", "chromosome_name")   ######or illumina_humanht_v3
theAttributes = c("hgnc_symbol", "chromosome_name","start_position","end_position")
list(rownames(cnData), c(1:22,"X","Y"))
test1 <- getBM(attributes=theAttributes,filters=theFilters,values=list(rownames(cnData), c(1:22,"X","Y")),mart=mart)
head(test1)
dim(test1)
dim(cnData)
genesAnnot <- getGene( id=rownames(cnData), type="hgnc_symbol", mart = mart)
head(test1)
dim(test1)
dim(cnData)
annot <- getBM(attributes=theAttributes,filters=theFilters,values=list(rownames(cnData), c(1:22,"X","Y")),mart=mart)
annot_genes <- intersect(annot$hgnc_symbol,rownames(cnData))
head(annot_genes)
length(annot_genes)
dim(cnData[rownames(cnData) %in% annot_genes, ])
cnData.subset <- cnData[rownames(cnData) %in% annot_genes, ]
head(cnData.subset)
length(annot_genes[annot_genes %in% rownames(cnData.subset) ])
annot_genes <- annot_genes[annot_genes %in% rownames(cnData.subset) ]
length(annot_genes)
head(annot_genes)
dim(cnData.subset)
heafd(cnData.subset)
head(cnData.subset)
length(annot_genes)
head(annot)
dim(annot[annot$hgnc_symbol %in% annot_genes ])
dim(annot[ annot$hgnc_symbol %in% annot_genes, ])
head(annot$hgnc_symbol)
length(annot_genes)
dim(annot$hgnc_symbol)
length(annot$hgnc_symbol)
length(annot$hgnc_symbol %in% annot_genes)
dim(annot[ annot_genes %in% annot$hgnc_symbol, ])
head(annot_genes)
head(annot)
rownames(annot) <- annot$hgnc_symbol
###### Get genes present in the data and annotation object
annot_genes <- intersect(annot$hgnc_symbol,rownames(cnData))
cnData.subset <- cnData[rownames(cnData) %in% annot_genes, ]
annot <- getBM(attributes=theAttributes,filters=theFilters,values=list(rownames(cnData), c(1:22,"X","Y")),mart=mart)
rownames(annot) <- annot$hgnc_symbol
annot <- getBM(attributes=theAttributes,filters=theFilters,values=list(rownames(cnData), c(1:22,"X","Y")),mart=mart)
###### Get genes present in the data and annotation object
annot_genes <- intersect(annot$hgnc_symbol,rownames(cnData))
cnData.subset <- cnData[rownames(cnData) %in% annot_genes, ]
length(unique(annot_genes))
length(annot_genes)
dim(annot[!duplicated(annot["hgnc_symbol"]),])
annot <- annot[!duplicated(annot["hgnc_symbol"]),]
annot_genes <- intersect(annot$hgnc_symbol,rownames(cnData))
length(annot_genes)
cnData.subset <- cnData[rownames(cnData) %in% annot_genes, ]
dim(annot[ annot$hgnc_symbol %in% annot_genes, ])
annot <- annot[ annot$hgnc_symbol %in% annot_genes, ]
head(annot)
cnData.subset <- cnData.subset[ annot$hgnc_symbol, ]
head(annot)
head(cnData.subset)
cnData.annot <- cbind(annot, cnData.subset)
View(cnData.annot)
View(cnData.annot)
head(cnData.annot)
rownames(annot) <- annot$hgnc_symbol
head(annot)
annot <- annot[,-1]
head(annot)
cnData.annot <- cbind(annot, cnData.subset)
cnFile
paste0(outFolder,"annotated_", cnFile)
setwd(outFolder)
getwd()
paste0("annotated_", cnFile)
paste0(cnFile, "_annotated.csv")
write.table(prepare2write(cnData.annot), file=paste0(cnFile, "_annotated.csv"), row.names=FALSE)
##### Prepare object to write into a file
prepare2write <- function (x) {
x2write <- cbind(rownames(x), x)
colnames(x2write) <- c("",colnames(x))
return(x2write)
}
write.table(prepare2write(cnData.annot), file=paste0(cnFile, "_annotated.csv"), row.names=FALSE)
write.table(prepare2write(cnData.annot), file=paste0(cnFile, "_annotated.txt"), row.names=FALSE)
write.table(prepare2write(cnData.annot), file=paste0(cnFile, "_annotated.txt"), sep="/t", row.names=FALSE)
write.table(prepare2write(cnData.annot), file=paste0(cnFile, "_annotated.txt"), sep="\t", row.names=FALSE)
write.table(prepare2write(cnData.annot), file=paste0(cnFile, "_annotated.csv"), sep="\t", row.names=FALSE)
getwd()
system("ls")
paste0("norm_files/",cnFile, "_annotated.csv")
##### Clear workspace
rm(list=ls())
##### Close any open graphics devices
graphics.off()
cnFile="cn.csv"
outFolder="/Users/marzec01/Desktop/git/PED_bioinformatics_portal/PED_Analytics/ped_backoffice/data/ccle/norm_files"
##### Create 'not in' operator
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0
##### Prepare object to write into a file
prepare2write <- function (x) {
x2write <- cbind(rownames(x), x)
colnames(x2write) <- c("",colnames(x))
return(x2write)
}
##### Deal with the duplicated genes
duplGenes <- function(expData) {
genesList <- NULL
genesRepl <- NULL
for ( i in 1:nrow(expData) ) {
geneName <- expData[i,1]
##### Distingish duplicated genes by adding duplicate number
if ( geneName %in% genesList ) {
##### Report genes with more than one duplicates
if ( geneName %in% names(genesRepl) ) {
genesRepl[[ geneName ]] = genesRepl[[ geneName ]]+1
geneName <- paste(geneName, "-", genesRepl[[ geneName ]], sep="")
} else {
genesRepl[[ geneName ]] <- 2
geneName <- paste(geneName, "-2", sep="")
}
}
genesList <- c(genesList,geneName)
}
rownames(expData) <- genesList
##### Remove the first column with gene names, which now are used as row names
expData <- expData[, -1]
return(expData)
}
#===============================================================================
#    Load libraries
#===============================================================================
suppressMessages(library(optparse))
suppressMessages(library(biomaRt))
cn_files = unlist(strsplit(cnFile, ","))
j=1
ef = paste(outFolder,cn_files[j],sep = "/")
##### Read file with copy-number data
cnData <- read.table(ef,sep="\t",header=TRUE,row.names=NULL, stringsAsFactors = FALSE)
###### Deal with the duplicated genes
cnData <- duplGenes(cnData)
mart = useMart(biomart = "ENSEMBL_MART_ENSEMBL",dataset="hsapiens_gene_ensembl",host = "jul2015.archive.ensembl.org")
#listFilters(mart)
#listAttributes(mart)
###### Set filters and attributes for BioMart
theFilters = c("hgnc_symbol", "chromosome_name")
theAttributes = c("hgnc_symbol", "chromosome_name","start_position","end_position")
###### Retrieve the gene annotation
annot <- getBM(attributes=theAttributes,filters=theFilters,values=list(rownames(cnData), c(1:22,"X","Y")),mart=mart)
###### remove duplicated genes
annot <- annot[!duplicated(annot["hgnc_symbol"]),]
###### Get genes present in the data and annotation object
annot_genes <- intersect(annot$hgnc_symbol,rownames(cnData))
length(annot_genes)
head(annot_genes)
dim(cnData)
cnData.subset <- cnData[rownames(cnData) %in% annot_genes, ]
annot <- annot[ annot$hgnc_symbol %in% annot_genes, ]
rownames(annot) <- annot$hgnc_symbol
annot <- annot[,-1]
head(annot)
cnData.subset <- cnData.subset[ annot$hgnc_symbol, ]
dim(cnData.subset)
head(cnData.subset)
cnData.subset <- cnData.subset[ rownames(annot), ]
cnData.subset <- cnData[rownames(cnData) %in% annot_genes, ]
annot <- annot[ annot$hgnc_symbol %in% annot_genes, ]
rownames(annot) <- annot$hgnc_symbol
annot <- annot[,-1]
##### Make sure that the genes order is the same as in the annotation object
cnData.subset <- cnData.subset[ rownames(annot), ]
head(cnData.subset)
rownames(annot)
###### Retrieve the gene annotation
annot <- getBM(attributes=theAttributes,filters=theFilters,values=list(rownames(cnData), c(1:22,"X","Y")),mart=mart)
###### remove duplicated genes
annot <- annot[!duplicated(annot["hgnc_symbol"]),]
###### Get genes present in the data and annotation object
annot_genes <- intersect(annot$hgnc_symbol,rownames(cnData))
cnData.subset <- cnData[rownames(cnData) %in% annot_genes, ]
annot <- annot[ annot$hgnc_symbol %in% annot_genes, ]
rownames(annot) <- annot$hgnc_symbol
annot <- annot[,-1]
##### Make sure that the genes order is the same as in the annotation object
cnData.subset <- cnData.subset[ rownames(annot), ]
head(cnData.subset)
dim(cnData.subset)
##### Combine the annotation and copy-data
cnData.annot <- cbind(annot, cnData.subset)
setwd(outFolder)
##### Write the annotated copy-data into a file
write.table(prepare2write(cnData.annot), file=paste0(cnFile, "_annotated.csv"), sep="\t", row.names=FALSE)
##### Clear workspace
rm(list=ls())
##### Close any open graphics devices
graphics.off()
### Setting environment for pandoc
Sys.setenv(HOME = "")
##### Create 'not in' operator
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0
##### Prepare object to write into a file
prepare2write <- function (x) {
x2write <- cbind(rownames(x), x)
colnames(x2write) <- c("",colnames(x))
return(x2write)
}
##### Deal with the duplicated genes
duplGenes <- function(expData) {
genesList <- NULL
genesRepl <- NULL
for ( i in 1:nrow(expData) ) {
geneName <- expData[i,1]
##### Distingish duplicated genes by adding duplicate number
if ( geneName %in% genesList ) {
##### Report genes with more than one duplicates
if ( geneName %in% names(genesRepl) ) {
genesRepl[[ geneName ]] = genesRepl[[ geneName ]]+1
geneName <- paste(geneName, "-", genesRepl[[ geneName ]], sep="")
} else {
genesRepl[[ geneName ]] <- 2
geneName <- paste(geneName, "-2", sep="")
}
}
genesList <- c(genesList,geneName)
}
rownames(expData) <- genesList
##### Remove the first column with gene names, which now are used as row names
expData <- expData[, -1]
return(expData)
}
#===============================================================================
#    Load libraries
#===============================================================================
suppressMessages(library(optparse))
suppressMessages(library(biomaRt))
expFile="gene_exp.csv"
outFolder="/Users/marzec01/Desktop/git/PED_bioinformatics_portal/PED_Analytics/ped_backoffice/data/ccle/norm_files"
exp_files = unlist(strsplit(expFile, ","))
j=1
ef = paste(outFolder,exp_files[j],sep = "/")
##### Read file with copy-number data
expData <- read.table(ef,sep="\t",header=TRUE,row.names=NULL, stringsAsFactors = FALSE)
###### Deal with the duplicated genes
expData <- duplGenes(expData)
View(expData)
View(expData)
mart = useMart(biomart = "ENSEMBL_MART_ENSEMBL",dataset="hsapiens_gene_ensembl",host = "jul2015.archive.ensembl.org")
#listFilters(mart)
theFilters = c("hgnc_symbol", "chromosome_name")
theAttributes = c("hgnc_symbol", "chromosome_name","start_position","end_position")
###### Retrieve the gene annotation
annot <- getBM(attributes=theAttributes,filters=theFilters,values=list(rownames(expData), c(1:22,"X","Y")),mart=mart)
annot <- annot[!duplicated(annot["hgnc_symbol"]),]
###### Get genes present in the data and annotation object
annot_genes <- intersect(annot$hgnc_symbol,rownames(expData))
expData.subset <- expData[rownames(expData) %in% annot_genes, ]
annot <- annot[ annot$hgnc_symbol %in% annot_genes, ]
rownames(annot) <- annot$hgnc_symbol
annot <- annot[,-1]
expData.subset <- expData.subset[ rownames(annot), ]
dim(expData.subset)
expData.annot <- cbind(annot, expData.subset)
setwd(outFolder)
write.table(prepare2write(expData.annot), file=paste0(expFile, "_annotated.csv"), sep="\t", row.names=FALSE)
write.table(prepare2write(expData.annot), file=paste0(expFile, "_annotated.txt"), sep="\t", row.names=FALSE)
write.table(prepare2write(expData.annot), file=paste0(expFile, "_annotated.txt"), sep="\t", row.names=FALSE)
q()
