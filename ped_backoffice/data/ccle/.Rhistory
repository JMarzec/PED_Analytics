##### Use the genomic positions order for bars
data2plot$Gene <- factor(data2plot$Gene, levels = data2plot$Gene)
p <- plot_ly(data2plot, x = ~Gene, y = ~Gain, type = 'bar', name = "Gain", color = I("red"), width = 800, height = 400) %>%
add_trace(y = ~Loss, name = "Loss", color = I("blue")) %>%
add_trace(x = ~Gene, y = ~Chr_line, type = 'scatter', name = "Chromosomes", mode = 'lines', line = list(color = "lightgrey", dash = "1px"), hoverinfo = "skip") %>%
layout( title = target.sel, yaxis = list(title = "Frequency (%)"), xaxis = list(title = "Chromosome number", showticklabels = FALSE), annotations = chr_nos, barmode = 'group', bargap = 0, margin = list(l=50, r=50, b=100, t=50, pad=4), autosize = F, legend = list(orientation = 'h', y = 1.08, tracegroupgap=0), showlegend=TRUE)
##### Save the frequency plot as html (PLOTLY)
htmlwidgets::saveWidget(as_widget(p), paste0(hexcode,"_frequency_plot_", j, "_", i, ".html"))
}
##### Generate frequency plot for each group separately
for(i in 1:length(unique(targets))) {
##### Select samples from the group
target.sel <- unique(sort(targets))[i]
cnData.subset.sel <- cnData.subset[ targets %in%  target.sel    ]
##### Add genomic info
cnData.subset.sel <- cbind(cnData.pos, cnData.subset.sel)
cnData.subset.sel$Loss=rep(0,length(nrow(cnData.subset.sel)))
cnData.subset.sel$Gain=rep(0,length(nrow(cnData.subset.sel)))
cnData.subset.sel = cnData.subset.sel[order(as.numeric(cnData.subset.sel$Chromosome),as.numeric(cnData.subset.sel$Position)),]
##### Count number of samples with gains/losses at each position (segment mean > 0.5 or <= -05, respectively)
gainSum <- rowSums(cnData.subset.sel[,c(3:ncol(cnData.subset.sel))] > 0.5)/(ncol(cnData.subset.sel)-4)
lossSum <- rowSums(cnData.subset.sel[,c(3:ncol(cnData.subset.sel))] <= -0.5)/(ncol(cnData.subset.sel)-4)
##### Get frequency values
cnData.subset.sel[,"Gain"] = gainSum
cnData.subset.sel[,"Loss"] = -lossSum
##### Label chromosomes
chr_bins <- data.matrix(summary(as.factor(cnData.subset.sel$Chromosome)))
chr_bins<- data.frame(chr_bins,row.names(chr_bins) )
colnames(chr_bins) = c("count","Chromosome")
data.chr_bins <- data.frame(unique(cnData.subset.sel$Chromosome))
colnames(data.chr_bins) = c("Chromosome")
chr_annot <- merge(data.chr_bins,chr_bins, by.x="Chromosome", by.y="Chromosome", sort=FALSE)
for(k in 2:length(row.names(chr_annot))) {
chr_annot[k,2] = chr_annot[k-1,2] + chr_annot[k,2]
}
chr_annot[1,3] <- chr_annot[1,2] / 2
for (k in 2:length(row.names(chr_annot))) {
chr_annot[k,3] <- (chr_annot[k,2]+chr_annot[k-1,2])/2
}
##### Create a list with chromosme boundaries info
chr_nos <- list( x = chr_annot[, 3], y = -1.1, text = chr_annot$Chromosome, xref = "x", yref = "y", showarrow = FALSE )
##### Prepare vector to indicate chromosome boundaries
chr_lines <- rep(0, nrow(cnData.subset.sel))
chr_lines[ chr_annot[,2]-1 ] <- 1
chr_lines[ chr_annot[,2] ] <- -1
#####
data2plot <- data.frame(rownames(cnData.subset.sel), cnData.subset.sel$Loss, cnData.subset.sel$Gain, chr_lines)
colnames(data2plot) <- c("Gene", "Loss", "Gain", "Chr_line")
##### Use the genomic positions order for bars
data2plot$Gene <- factor(data2plot$Gene, levels = data2plot$Gene)
p <- plot_ly(data2plot, x = ~Gene, y = ~Gain, type = 'bar', name = "Gain", color = I("red"), width = 800, height = 400) %>%
add_trace(y = ~Loss, name = "Loss", color = I("blue")) %>%
add_trace(x = ~Gene, y = ~Chr_line, type = 'scatter', name = "Chromosomes", mode = 'lines', line = list(color = "lightgrey", dash = "1px"), hoverinfo = "skip") %>%
layout( title = target.sel, yaxis = list(title = "Frequency (%)"), xaxis = list(title = "Chromosome number", showticklabels = FALSE), annotations = chr_nos, barmode = 'group', bargap = 0, margin = list(l=50, r=50, b=100, t=50, pad=4), autosize = F, legend = list(orientation = 'h', y = 1.07, tracegroupgap=0), showlegend=TRUE)
##### Save the frequency plot as html (PLOTLY)
htmlwidgets::saveWidget(as_widget(p), paste0(hexcode,"_frequency_plot_", j, "_", i, ".html"))
}
##### Close any open graphics devices
??sort
?sort
##### Generate frequency plot for each group separately
for(i in 1:length(unique(targets))) {
##### Select samples from the group
target.sel <- unique(sort(targets, decreasing = TRUE))[i]
cnData.subset.sel <- cnData.subset[ targets %in%  target.sel    ]
##### Add genomic info
cnData.subset.sel <- cbind(cnData.pos, cnData.subset.sel)
cnData.subset.sel$Loss=rep(0,length(nrow(cnData.subset.sel)))
cnData.subset.sel$Gain=rep(0,length(nrow(cnData.subset.sel)))
cnData.subset.sel = cnData.subset.sel[order(as.numeric(cnData.subset.sel$Chromosome),as.numeric(cnData.subset.sel$Position)),]
##### Count number of samples with gains/losses at each position (segment mean > 0.5 or <= -05, respectively)
gainSum <- rowSums(cnData.subset.sel[,c(3:ncol(cnData.subset.sel))] > 0.5)/(ncol(cnData.subset.sel)-4)
lossSum <- rowSums(cnData.subset.sel[,c(3:ncol(cnData.subset.sel))] <= -0.5)/(ncol(cnData.subset.sel)-4)
##### Get frequency values
cnData.subset.sel[,"Gain"] = gainSum
cnData.subset.sel[,"Loss"] = -lossSum
##### Label chromosomes
chr_bins <- data.matrix(summary(as.factor(cnData.subset.sel$Chromosome)))
chr_bins<- data.frame(chr_bins,row.names(chr_bins) )
colnames(chr_bins) = c("count","Chromosome")
data.chr_bins <- data.frame(unique(cnData.subset.sel$Chromosome))
colnames(data.chr_bins) = c("Chromosome")
chr_annot <- merge(data.chr_bins,chr_bins, by.x="Chromosome", by.y="Chromosome", sort=FALSE)
for(k in 2:length(row.names(chr_annot))) {
chr_annot[k,2] = chr_annot[k-1,2] + chr_annot[k,2]
}
chr_annot[1,3] <- chr_annot[1,2] / 2
for (k in 2:length(row.names(chr_annot))) {
chr_annot[k,3] <- (chr_annot[k,2]+chr_annot[k-1,2])/2
}
##### Create a list with chromosme boundaries info
chr_nos <- list( x = chr_annot[, 3], y = -1.1, text = chr_annot$Chromosome, xref = "x", yref = "y", showarrow = FALSE )
##### Prepare vector to indicate chromosome boundaries
chr_lines <- rep(0, nrow(cnData.subset.sel))
chr_lines[ chr_annot[,2]-1 ] <- 1
chr_lines[ chr_annot[,2] ] <- -1
#####
data2plot <- data.frame(rownames(cnData.subset.sel), cnData.subset.sel$Loss, cnData.subset.sel$Gain, chr_lines)
colnames(data2plot) <- c("Gene", "Loss", "Gain", "Chr_line")
##### Use the genomic positions order for bars
data2plot$Gene <- factor(data2plot$Gene, levels = data2plot$Gene)
p <- plot_ly(data2plot, x = ~Gene, y = ~Gain, type = 'bar', name = "Gain", color = I("red"), width = 800, height = 400) %>%
add_trace(y = ~Loss, name = "Loss", color = I("blue")) %>%
add_trace(x = ~Gene, y = ~Chr_line, type = 'scatter', name = "Chromosomes", mode = 'lines', line = list(color = "lightgrey", dash = "1px"), hoverinfo = "skip") %>%
layout( title = target.sel, yaxis = list(title = "Frequency (%)"), xaxis = list(title = "Chromosome number", showticklabels = FALSE), annotations = chr_nos, barmode = 'group', bargap = 0, margin = list(l=50, r=50, b=100, t=50, pad=4), autosize = F, legend = list(orientation = 'h', y = 1.07, tracegroupgap=0), showlegend=TRUE)
##### Save the frequency plot as html (PLOTLY)
htmlwidgets::saveWidget(as_widget(p), paste0(hexcode,"_frequency_plot_", j, "_", i, ".html"))
}
exp_files
exp_files="CCLE_copynumber_byGene_2013-12-03_PC_chr_pos_noXY"
##### Generate frequency plot for each group separately
for(i in 1:length(unique(targets))) {
##### Select samples from the group
target.sel <- unique(sort(targets, decreasing = TRUE))[i]
cnData.subset.sel <- cnData.subset[ targets %in%  target.sel    ]
##### Add genomic info
cnData.subset.sel <- cbind(cnData.pos, cnData.subset.sel)
cnData.subset.sel$Loss=rep(0,length(nrow(cnData.subset.sel)))
cnData.subset.sel$Gain=rep(0,length(nrow(cnData.subset.sel)))
cnData.subset.sel = cnData.subset.sel[order(as.numeric(cnData.subset.sel$Chromosome),as.numeric(cnData.subset.sel$Position)),]
##### Count number of samples with gains/losses at each position (segment mean > 0.5 or <= -05, respectively)
gainSum <- rowSums(cnData.subset.sel[,c(3:ncol(cnData.subset.sel))] > 0.5)/(ncol(cnData.subset.sel)-4)
lossSum <- rowSums(cnData.subset.sel[,c(3:ncol(cnData.subset.sel))] <= -0.5)/(ncol(cnData.subset.sel)-4)
##### Get frequency values
cnData.subset.sel[,"Gain"] = gainSum
cnData.subset.sel[,"Loss"] = -lossSum
##### Label chromosomes
chr_bins <- data.matrix(summary(as.factor(cnData.subset.sel$Chromosome)))
chr_bins<- data.frame(chr_bins,row.names(chr_bins) )
colnames(chr_bins) = c("count","Chromosome")
data.chr_bins <- data.frame(unique(cnData.subset.sel$Chromosome))
colnames(data.chr_bins) = c("Chromosome")
chr_annot <- merge(data.chr_bins,chr_bins, by.x="Chromosome", by.y="Chromosome", sort=FALSE)
for(k in 2:length(row.names(chr_annot))) {
chr_annot[k,2] = chr_annot[k-1,2] + chr_annot[k,2]
}
chr_annot[1,3] <- chr_annot[1,2] / 2
for (k in 2:length(row.names(chr_annot))) {
chr_annot[k,3] <- (chr_annot[k,2]+chr_annot[k-1,2])/2
}
##### Create a list with chromosme boundaries info
chr_nos <- list( x = chr_annot[, 3], y = -1.1, text = chr_annot$Chromosome, xref = "x", yref = "y", showarrow = FALSE )
##### Prepare vector to indicate chromosome boundaries
chr_lines <- rep(0, nrow(cnData.subset.sel))
chr_lines[ chr_annot[,2]-1 ] <- 1
chr_lines[ chr_annot[,2] ] <- -1
#####
data2plot <- data.frame(rownames(cnData.subset.sel), cnData.subset.sel$Loss, cnData.subset.sel$Gain, chr_lines)
colnames(data2plot) <- c("Gene", "Loss", "Gain", "Chr_line")
##### Use the genomic positions order for bars
data2plot$Gene <- factor(data2plot$Gene, levels = data2plot$Gene)
p <- plot_ly(data2plot, x = ~Gene, y = ~Gain, type = 'bar', name = "Gain", color = I("red"), width = 800, height = 400) %>%
add_trace(y = ~Loss, name = "Loss", color = I("blue")) %>%
add_trace(x = ~Gene, y = ~Chr_line, type = 'scatter', name = "Chromosomes", mode = 'lines', line = list(color = "lightgrey", dash = "1px"), hoverinfo = "skip") %>%
layout( title = target.sel, yaxis = list(title = "Fraction of samples"), xaxis = list(title = "Chromosome number", showticklabels = FALSE), annotations = chr_nos, barmode = 'group', bargap = 0, margin = list(l=50, r=50, b=100, t=50, pad=4), autosize = F, legend = list(orientation = 'h', y = 1.07, tracegroupgap=0), showlegend=TRUE)
##### Save the frequency plot as html (PLOTLY)
htmlwidgets::saveWidget(as_widget(p), paste0(hexcode,"_frequency_plot_", j, "_", i, ".html"))
}
##### Close any open graphics devices
setwd("/Users/marzec01/Desktop/git/PED_bioinformatics_portal/PED_Analytics_backup/ped_backoffice/data/ccle")
##### Clear workspace
rm(list=ls())
##### Close any open graphics devices
graphics.off()
### Setting environment for pandoc
Sys.setenv(HOME = "")
##### Create 'not in' operator
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0
##### Deal with the duplicated genes
duplGenes <- function(expData) {
genesList <- NULL
genesRepl <- NULL
for ( i in 1:nrow(expData) ) {
geneName <- expData[i,1]
##### Distingish duplicated genes by adding duplicate number
if ( geneName %in% genesList ) {
##### Report genes with more than one duplicates
if ( geneName %in% names(genesRepl) ) {
genesRepl[[ geneName ]] = genesRepl[[ geneName ]]+1
geneName <- paste(geneName, "-", genesRepl[[ geneName ]], sep="")
} else {
genesRepl[[ geneName ]] <- 2
geneName <- paste(geneName, "-2", sep="")
}
}
genesList <- c(genesList,geneName)
}
rownames(expData) <- genesList
##### Remove the first column with gene names, which now are used as row names
expData <- expData[, -1]
return(expData)
}
suppressMessages(library(plotly))
suppressMessages(library(optparse))
expFile="cn_chr_pos_noXY.csv"
annFile="cn_target.txt"
target="Target"
hexcode <- "dnasi"
exp_files = unlist(strsplit(expFile, ","))
##### Read sample annotation file
annData <- read.table(annFile,sep="\t",as.is=TRUE,header=TRUE)
annData$File_name <- make.names(annData$File_name)
j=1
length(exp_files)
ef = paste(outFolder,"norm_files",exp_files[j],sep = "/")
outFolder="/Users/marzec01/Desktop/git/PED_bioinformatics_portal/PED_Analytics_backup/ped_backoffice/data/ccle"
exp_files = unlist(strsplit(expFile, ","))
##### Read sample annotation file
annData <- read.table(annFile,sep="\t",as.is=TRUE,header=TRUE)
annData$File_name <- make.names(annData$File_name)
ef = paste(outFolder,"norm_files",exp_files[j],sep = "/")
cnData <- read.table(ef,sep="\t",header=TRUE,row.names=NULL, stringsAsFactors = FALSE)
###### Deal with the duplicated genes
cnData <- duplGenes(cnData)
######  Keep genomic info separately
cnData.pos <- cnData[, c(1:3)]
cnData <- cnData[, c(3:ncol(cnData))]
selected_samples <- intersect(as.character(annData$File_name),colnames(cnData))
cnData.subset <- cnData[,colnames(cnData) %in% selected_samples]
##### Make sure that the sample order is the same as in the target file
cnData.subset <- cnData.subset[ , selected_samples ]
targets <- subset(annData, File_name %in% colnames(cnData.subset))[,target]
##### Draw histogram of correlation coefficients (PLOTLY)
p <- plot_ly(x = ~unlist(cnData.subset), type = 'histogram', width = 800, height = 500) %>%
layout(xaxis = list( title = "Relative linear copy-number values"), yaxis = list( title = "Frequency"), margin = list(l=50, r=50, b=50, t=50, pad=4), autosize = F)
##### Save the histogram as html (PLOTLY)
htmlwidgets::saveWidget(as_widget(p), paste0(hexcode, "_corr_hist.html"))
ef = paste(outFolder,"norm_files",exp_files[j],sep = "/")
##### Read file with copy-number data
cnData <- read.table(ef,sep="\t",header=TRUE,row.names=NULL, stringsAsFactors = FALSE)
ef
outFolder
exp_files
ef = paste(outFolder,"norm_files",exp_files[j],sep = "/")
ef
outFolder
exp_files
ef = paste(outFolder,"norm_files",exp_files[j],sep = "/")
ef
cnData <- read.table(ef,sep="\t",header=TRUE,row.names=NULL, stringsAsFactors = FALSE)
cnData <- duplGenes(cnData)
######  Keep genomic info separately
cnData.pos <- cnData[, c(1:3)]
cnData <- cnData[, c(3:ncol(cnData))]
selected_samples <- intersect(as.character(annData$File_name),colnames(cnData))
cnData.subset <- cnData[,colnames(cnData) %in% selected_samples]
##### Make sure that the sample order is the same as in the target file
cnData.subset <- cnData.subset[ , selected_samples ]
targets <- subset(annData, File_name %in% colnames(cnData.subset))[,target]
##### Draw histogram of correlation coefficients (PLOTLY)
p <- plot_ly(x = ~unlist(cnData.subset), type = 'histogram', width = 800, height = 500) %>%
layout(xaxis = list( title = "Relative linear copy-number values"), yaxis = list( title = "Frequency"), margin = list(l=50, r=50, b=50, t=50, pad=4), autosize = F)
##### Save the histogram as html (PLOTLY)
htmlwidgets::saveWidget(as_widget(p), paste0(hexcode, "_corr_hist.html"))
##### Generate frequency plot for each group separately
for(i in 1:length(unique(targets))) {
##### Select samples from the group
target.sel <- unique(sort(targets, decreasing = TRUE))[i]
cnData.subset.sel <- cnData.subset[ targets %in%  target.sel    ]
##### Add genomic info
cnData.subset.sel <- cbind(cnData.pos, cnData.subset.sel)
cnData.subset.sel$Loss=rep(0,length(nrow(cnData.subset.sel)))
cnData.subset.sel$Gain=rep(0,length(nrow(cnData.subset.sel)))
cnData.subset.sel = cnData.subset.sel[order(as.numeric(cnData.subset.sel$Chromosome),as.numeric(cnData.subset.sel$Position)),]
##### Count number of samples with gains/losses at each position (segment mean > 0.5 or <= -05, respectively)
gainSum <- rowSums(cnData.subset.sel[,c(3:ncol(cnData.subset.sel))] > 0.5)/(ncol(cnData.subset.sel)-4)
lossSum <- rowSums(cnData.subset.sel[,c(3:ncol(cnData.subset.sel))] <= -0.5)/(ncol(cnData.subset.sel)-4)
##### Get frequency values
cnData.subset.sel[,"Gain"] = gainSum
cnData.subset.sel[,"Loss"] = -lossSum
##### Label chromosomes
chr_bins <- data.matrix(summary(as.factor(cnData.subset.sel$Chromosome)))
chr_bins<- data.frame(chr_bins,row.names(chr_bins) )
colnames(chr_bins) = c("count","Chromosome")
data.chr_bins <- data.frame(unique(cnData.subset.sel$Chromosome))
colnames(data.chr_bins) = c("Chromosome")
chr_annot <- merge(data.chr_bins,chr_bins, by.x="Chromosome", by.y="Chromosome", sort=FALSE)
for(k in 2:length(row.names(chr_annot))) {
chr_annot[k,2] = chr_annot[k-1,2] + chr_annot[k,2]
}
chr_annot[1,3] <- chr_annot[1,2] / 2
for (k in 2:length(row.names(chr_annot))) {
chr_annot[k,3] <- (chr_annot[k,2]+chr_annot[k-1,2])/2
}
##### Create a list with chromosme boundaries info
chr_nos <- list( x = chr_annot[, 3], y = -1.1, text = chr_annot$Chromosome, xref = "x", yref = "y", showarrow = FALSE )
##### Prepare vector to indicate chromosome boundaries
chr_lines <- rep(0, nrow(cnData.subset.sel))
chr_lines[ chr_annot[,2]-1 ] <- 1
chr_lines[ chr_annot[,2] ] <- -1
#####
data2plot <- data.frame(rownames(cnData.subset.sel), cnData.subset.sel$Loss, cnData.subset.sel$Gain, chr_lines)
colnames(data2plot) <- c("Gene", "Loss", "Gain", "Chr_line")
##### Use the genomic positions order for bars
data2plot$Gene <- factor(data2plot$Gene, levels = data2plot$Gene)
p <- plot_ly(data2plot, x = ~Gene, y = ~Gain, type = 'bar', name = "Gain", color = I("red"), width = 800, height = 400) %>%
add_trace(y = ~Loss, name = "Loss", color = I("blue")) %>%
add_trace(x = ~Gene, y = ~Chr_line, type = 'scatter', name = "Chromosomes", mode = 'lines', line = list(color = "lightgrey", dash = "1px"), hoverinfo = "skip") %>%
layout( title = target.sel, yaxis = list(title = "Fraction of samples"), xaxis = list(title = "Chromosome number", showticklabels = FALSE), annotations = chr_nos, barmode = 'group', bargap = 0, margin = list(l=50, r=50, b=100, t=50, pad=4), autosize = F, legend = list(orientation = 'h', y = 1.07, tracegroupgap=0), showlegend=TRUE)
##### Save the frequency plot as html (PLOTLY)
htmlwidgets::saveWidget(as_widget(p), paste0(hexcode,"_frequency_plot_", j, "_", i, ".html"))
}
cn_file
expFile
outFolder
paste(outFolder,annFile,sep = "/")
head(cnData.subset)
dim(annData)
annot <- as.matrix(annData[,c(2:ncol(annData))])
names(annot) <- names(annData)[c(2:ncol(annData))]
targets.colour <- getTargetsColours(annData[,2])
##### Assign colours to analysed groups
getTargetsColours <- function(targets) {
##### Predefined selection of colours for groups
targets.colours <- c("red","blue","green","darkgoldenrod","darkred","deepskyblue", "coral", "cornflowerblue", "chartreuse4", "bisque4", "chocolate3", "cadetblue3", "darkslategrey", "lightgoldenrod4", "mediumpurple4", "orangered3")
f.targets <- factor(targets)
vec.targets <- targets.colours[1:length(levels(f.targets))]
targets.colour <- rep(0,length(f.targets))
for(i in 1:length(f.targets))
targets.colour[i] <- vec.targets[ f.targets[i]==levels(f.targets)]
return( list(vec.targets, targets.colour) )
}
targets.colour <- getTargetsColours(annData[,2])
dim(cnData.subset0)
dim(cnData.subset)
head(cnData.subset)
cnData.subset[ cnData.subset > 0.5 ] <- 1
cnData.subset[ cnData.subset < -0.5 ] <- -1
cnData.subset[ cnData.subset <= 0.5 & cnData.subset >= -0.5 ] <- 0
View(cnData.subset)
head(cnData.subset[order(as.numeric(cnData.subset$Chromosome),as.numeric(cnData.subset$Position)),])
cnData.subset <- cbind(cnData.pos, cnData.subset)
head(cnData.subset[order(as.numeric(cnData.subset$Chromosome),as.numeric(cnData.subset$Position)),])
cnData.subset = cnData.subset[order(as.numeric(cnData.subset$Chromosome),as.numeric(cnData.subset$Position)),]
cnData.subset <- cnData[,colnames(cnData) %in% selected_samples]
##### Make sure that the sample order is the same as in the target file
cnData.subset <- cnData.subset[ , selected_samples ]
cnData.pos
head(cnData.pos)
head(cnData.subset[order(as.numeric(cnData.pos$Chromosome),as.numeric(cnData.pos$Position)),])
cnData.subset = cnData.subset[order(as.numeric(cnData.pos$Chromosome),as.numeric(cnData.pos$Position)),]
cnData.subset[ cnData.subset > 0.5 ] <- 1
cnData.subset[ cnData.subset < -0.5 ] <- -1
cnData.subset[ cnData.subset <= 0.5 & cnData.subset >= -0.5 ] <- 0
cnData.subset.t <- data.frame(t(cnData.subset))
p <- heatmaply(data.frame(cbind( expData.t, annot )), k_col=k_col, k_row=k_row, Rowv=as.dendrogram(hr), Colv=as.dendrogram(hc), colors = colorRampPalette(c("darkblue","darkblue","darkslateblue","darkslateblue","white","firebrick3","firebrick3","firebrick4","firebrick4"))(100), scale="none", trace="none", hide_colorbar = TRUE, fontsize_row = 8, fontsize_col = 8) %>%
layout(autosize = TRUE, width = 800, margin = list(l=100, r=50, b=150, t=50, pad=4), showlegend = FALSE)
suppressMessages(library(heatmaply))
##### Generate heatmap (PLOTLY)
p <- heatmaply(data.frame(cbind( expData.t, annot )), k_col=k_col, k_row=k_row, Rowv=as.dendrogram(hr), Colv=as.dendrogram(hc), colors = colorRampPalette(c("darkblue","darkblue","darkslateblue","darkslateblue","white","firebrick3","firebrick3","firebrick4","firebrick4"))(100), scale="none", trace="none", hide_colorbar = TRUE, fontsize_row = 8, fontsize_col = 8) %>%
layout(autosize = TRUE, width = 800, margin = list(l=100, r=50, b=150, t=50, pad=4), showlegend = FALSE)
##### Generate heatmap (PLOTLY)
p <- heatmaply(data.frame(cbind( cnData.subset.t, annot )), Rowv=NULL, Colv=NULL, colors = colorRampPalette(c("darkblue","darkblue","darkslateblue","darkslateblue","white","firebrick3","firebrick3","firebrick4","firebrick4"))(100), scale="none", trace="none", hide_colorbar = TRUE, fontsize_row = 8, fontsize_col = 8) %>%
layout(autosize = TRUE, width = 800, margin = list(l=100, r=50, b=150, t=50, pad=4), showlegend = FALSE)
p
##### Generate heatmap (PLOTLY)
p <- heatmaply(data.frame(cbind( cnData.subset.t, annot )), Rowv=NULL, Colv=NULL, colors = c("blue", "red"), scale="none", trace="none", hide_colorbar = TRUE, fontsize_row = 8, fontsize_col = 8) %>%
layout(autosize = TRUE, width = 800, margin = list(l=100, r=50, b=150, t=50, pad=4), showlegend = FALSE)
##### Save the heatmap as html (PLOTLY)
widget_fn = paste(outFolder,paste0("heatmap_",j,".html"),sep="/")
htmlwidgets::saveWidget(p, widget_fn)
p
##### Generate heatmap (PLOTLY)
p <- heatmaply(data.frame(cbind( cnData.subset.t, annot )), Rowv=NULL, Colv=NULL, colors = c("blue", "white", "red"), scale="none", trace="none", hide_colorbar = TRUE, fontsize_row = 8, fontsize_col = 8) %>%
layout(autosize = TRUE, width = 800, margin = list(l=100, r=50, b=150, t=50, pad=4), showlegend = FALSE)
##### Save the heatmap as html (PLOTLY)
widget_fn = paste(outFolder,paste0("heatmap_",j,".html"),sep="/")
htmlwidgets::saveWidget(p, widget_fn)
##### Generate heatmap (PLOTLY)
p <- heatmaply(data.frame(cbind( cnData.subset.t, annot )), Rowv=NULL, Colv=NULL, colors = c("blue", "white", "red"), scale="none", trace="none", hide_colorbar = TRUE, fontsize_row = 8, fontsize_col = 8) %>%
layout(autosize = TRUE, width = 800, margin = list(l=100, r=50, b=150, t=50, pad=4), showlegend = FALSE)
##### Save the heatmap as html (PLOTLY)
widget_fn = paste(outFolder,paste0("heatmap_",j,".html"),sep="/")
htmlwidgets::saveWidget(p, widget_fn)
cnData.subset = cnData.subset[order(as.numeric(cnData.pos$Chromosome),as.numeric(cnData.pos$Position)),]
##### Keep 500 genes with the highest CN variance across samples
rsd<-apply(cnData.subset,1,sd)
if ( nrow(cnData.subset) < 500 ) {
sel<-order(rsd, decreasing=TRUE)[1:nrow(cnData.subset)]
} else {
sel<-order(rsd, decreasing=TRUE)[1:500]
}
cnData.subset <- cnData.subset[sel,]
dim(cnData.subset)
cnData.subset[ cnData.subset > 0.5 ] <- "Gain"
cnData.subset[ cnData.subset < -0.5 ] <- "Loss"
cnData.subset[ cnData.subset <= 0.5 & cnData.subset >= -0.5 ] <- "Diploid"
annData
annData
annot <- as.matrix(annData[,c(2:ncol(annData))])
names(annot) <- names(annData)[c(2:ncol(annData))]
##### Prepare colours for sample groups
targets.colour <- getTargetsColours(annData[,2])
##### Transpose matrix
cnData.subset.t <- data.frame(t(cnData.subset))
##### Generate heatmap (PLOTLY)
p <- heatmaply(data.frame(cbind( cnData.subset.t, annot )), Rowv=NULL, Colv=NULL, colors = c("blue", "white", "red"), scale="none", trace="none", hide_colorbar = TRUE, fontsize_row = 8, fontsize_col = 8) %>%
layout(autosize = TRUE, width = 800, margin = list(l=100, r=50, b=150, t=50, pad=4), showlegend = FALSE)
cnData.subset <- cnData[,colnames(cnData) %in% selected_samples]
##### Make sure that the sample order is the same as in the target file
cnData.subset <- cnData.subset[ , selected_samples ]
targets <- subset(annData, File_name %in% colnames(cnData.subset))[,target]
cnData.subset = cnData.subset[order(as.numeric(cnData.pos$Chromosome),as.numeric(cnData.pos$Position)),]
##### Keep 500 genes with the highest CN variance across samples
rsd<-apply(cnData.subset,1,sd)
if ( nrow(cnData.subset) < 500 ) {
sel<-order(rsd, decreasing=TRUE)[1:nrow(cnData.subset)]
} else {
sel<-order(rsd, decreasing=TRUE)[1:500]
}
cnData.subset <- cnData.subset[sel,]
##### Assign gain for linear CN values above 0.5 and loss for linear CN values below -0.5
cnData.subset[ cnData.subset > 0.5 ] <- 1
cnData.subset[ cnData.subset < -0.5 ] <- -1
cnData.subset[ cnData.subset <= 0.5 & cnData.subset >= -0.5 ] <- 0
##### Prepare samples annotation info
annot <- as.matrix(annData[,c(2:ncol(annData))])
names(annot) <- names(annData)[c(2:ncol(annData))]
##### Prepare colours for sample groups
targets.colour <- getTargetsColours(annData[,2])
##### Transpose matrix
cnData.subset.t <- data.frame(t(cnData.subset))
##### Generate heatmap (PLOTLY)
p <- heatmaply(data.frame(cbind( cnData.subset.t, annot )), Rowv=NULL, Colv=NULL, colors = c("blue", "white", "red"), scale="none", trace="none", hide_colorbar = TRUE, fontsize_row = 8, fontsize_col = 8) %>%
layout(autosize = TRUE, width = 800, margin = list(l=100, r=50, b=150, t=50, pad=4), showlegend = FALSE)
p
##### Save the heatmap as html (PLOTLY)
widget_fn = paste(outFolder,paste0("heatmap_",j,".html"),sep="/")
htmlwidgets::saveWidget(p, widget_fn)
View(data2plot)
hr <- hclust(as.dist(dist(cnData.subset.t, method="euclidean")), method="ward.D")
##### Generate heatmap (PLOTLY)
p <- heatmaply(data.frame(cbind( cnData.subset.t, annot )), Rowv=as.dendrogram(hr), Colv=NULL, colors = c("blue", "white", "red"), scale="none", trace="none", hide_colorbar = TRUE, fontsize_row = 8, fontsize_col = 8) %>%
layout(autosize = TRUE, width = 800, margin = list(l=100, r=50, b=150, t=50, pad=4), showlegend = FALSE)
##### Save the heatmap as html (PLOTLY)
widget_fn = paste(outFolder,paste0("heatmap_",j,".html"),sep="/")
htmlwidgets::saveWidget(p, widget_fn)
cnData.subset <- cnData[,colnames(cnData) %in% selected_samples]
##### Make sure that the sample order is the same as in the target file
cnData.subset <- cnData.subset[ , selected_samples ]
##### Order the data accordingly to genomic postions
cnData.subset = cnData.subset[order(as.numeric(cnData.pos$Chromosome),as.numeric(cnData.pos$Position)),]
##### Keep 500 genes with the highest CN variance across samples
rsd<-apply(cnData.subset,1,sd)
if ( nrow(cnData.subset) < 1000 ) {
sel<-order(rsd, decreasing=TRUE)[1:nrow(cnData.subset)]
} else {
sel<-order(rsd, decreasing=TRUE)[1:1000]
}
cnData.subset <- cnData.subset[sel,]
##### Assign gain for linear CN values above 0.5 and loss for linear CN values below -0.5
cnData.subset[ cnData.subset > 0.5 ] <- 1
cnData.subset[ cnData.subset < -0.5 ] <- -1
cnData.subset[ cnData.subset <= 0.5 & cnData.subset >= -0.5 ] <- 0
##### Prepare samples annotation info
annot <- as.matrix(annData[,c(2:ncol(annData))])
names(annot) <- names(annData)[c(2:ncol(annData))]
##### Prepare colours for sample groups
targets.colour <- getTargetsColours(annData[,2])
##### Transpose matrix
cnData.subset.t <- data.frame(t(cnData.subset))
##### Cluster samples
hr <- hclust(as.dist(dist(cnData.subset.t, method="euclidean")), method="ward.D")
##### Generate heatmap (PLOTLY)
p <- heatmaply(data.frame(cbind( cnData.subset.t, annot )), Rowv=as.dendrogram(hr), Colv=NULL, colors = c("blue", "white", "red"), scale="none", trace="none", hide_colorbar = TRUE, fontsize_row = 8, fontsize_col = 8) %>%
layout(autosize = TRUE, width = 800, margin = list(l=100, r=50, b=150, t=50, pad=4), showlegend = FALSE)
p
cnData.subset <- cnData[,colnames(cnData) %in% selected_samples]
##### Make sure that the sample order is the same as in the target file
cnData.subset <- cnData.subset[ , selected_samples ]
dim(cnData.subset)
##### Order the data accordingly to genomic postions
cnData.subset = cnData.subset[order(as.numeric(cnData.pos$Chromosome),as.numeric(cnData.pos$Position)),]
##### Keep 500 genes with the highest CN variance across samples
rsd<-apply(cnData.subset,1,sd)
if ( nrow(cnData.subset) < 5000 ) {
sel<-order(rsd, decreasing=TRUE)[1:nrow(cnData.subset)]
} else {
sel<-order(rsd, decreasing=TRUE)[1:5000]
}
cnData.subset <- cnData.subset[sel,]
##### Assign gain for linear CN values above 0.5 and loss for linear CN values below -0.5
cnData.subset[ cnData.subset > 0.5 ] <- 1
cnData.subset[ cnData.subset < -0.5 ] <- -1
cnData.subset[ cnData.subset <= 0.5 & cnData.subset >= -0.5 ] <- 0
annot <- as.matrix(annData[,c(2:ncol(annData))])
names(annot) <- names(annData)[c(2:ncol(annData))]
##### Prepare colours for sample groups
targets.colour <- getTargetsColours(annData[,2])
##### Transpose matrix
cnData.subset.t <- data.frame(t(cnData.subset))
##### Cluster samples
hr <- hclust(as.dist(dist(cnData.subset.t, method="euclidean")), method="ward.D")
##### Generate heatmap (PLOTLY)
p <- heatmaply(data.frame(cbind( cnData.subset.t, annot )), Rowv=as.dendrogram(hr), Colv=NULL, colors = c("blue", "white", "red"), scale="none", trace="none", hide_colorbar = TRUE, fontsize_row = 8, fontsize_col = 8) %>%
layout(autosize = TRUE, width = 800, margin = list(l=100, r=50, b=150, t=50, pad=4), showlegend = FALSE)
p
##### Generate heatmap (PLOTLY)
p <- heatmaply(data.frame(cbind( cnData.subset.t, annot )), Rowv=as.dendrogram(hr), Colv=NULL, colors = c("blue", "white", "red"), scale="none", trace="none", hide_colorbar = TRUE, fontsize_row = 8, fontsize_col = 8) %>%
add_trace(x = ~Gene, y = ~Chr_line, type = 'scatter', name = "Chromosomes", mode = 'lines', line = list(color = "lightgrey", dash = "1px"), hoverinfo = "skip") %>%
layout(autosize = TRUE, width = 800, margin = list(l=100, r=50, b=150, t=50, pad=4), showlegend = FALSE)
##### Generate heatmap (PLOTLY)
p <- heatmaply(data.frame(cbind( cnData.subset.t, annot )), Rowv=as.dendrogram(hr), Colv=NULL, colors = c("blue", "white", "red"), scale="none", trace="none", hide_colorbar = TRUE, fontsize_row = 8, fontsize_col = 8) %>%
add_trace(x = ~Gene, y = ~Chr_line, type = 'scatter', name = "Chromosomes", mode = 'lines', line = list(color = "lightgrey", dash = "1px"), hoverinfo = "skip") %>%
layout(autosize = TRUE, width = 800, margin = list(l=100, r=50, b=150, t=50, pad=4), showlegend = FALSE)
p
dim(cnData.subset.t)
cnData.subset.t
p <- heatmaply(data.frame(cbind( cnData.subset.t, annot )), Rowv=as.dendrogram(hr), Colv=NULL, colors = c("blue", "white", "red"), scale="none", trace="none", hide_colorbar = TRUE, fontsize_row = 8, fontsize_col = 8, showticklabels=FALSE) %>%
layout(autosize = TRUE, width = 800, margin = list(l=100, r=50, b=150, t=50, pad=4), showlegend = FALSE)
p
q()
