##### Get frequency values
cnData.subset.sel[,"Gain"] = gainSum
cnData.subset.sel[,"Loss"] = -lossSum
##### Label chromosomes
chr_bins <- data.matrix(summary(as.factor(cnData.subset.sel$Chromosome)))
chr_bins<- data.frame(chr_bins,row.names(chr_bins) )
colnames(chr_bins) = c("count","Chromosome")
data.chr_bins <- data.frame(unique(cnData.subset.sel$Chromosome))
colnames(data.chr_bins) = c("Chromosome")
chr_annot <- merge(data.chr_bins,chr_bins, by.x="Chromosome", by.y="Chromosome", sort=FALSE)
for(k in 2:length(row.names(chr_annot))) {
chr_annot[k,2] = chr_annot[k-1,2] + chr_annot[k,2]
}
chr_annot[1,3] <- chr_annot[1,2] / 2
for (k in 2:length(row.names(chr_annot))) {
chr_annot[k,3] <- (chr_annot[k,2]+chr_annot[k-1,2])/2
}
##### Create a list with chromosme boundaries info
levels(chr_annot$Chromosome)[ levels(chr_annot$Chromosome) == 23 ] <- "X"
chr_nos <- list( x = chr_annot[, 3], y = -1.1, text = chr_annot$Chromosome, xref = "x", yref = "y", showarrow = FALSE )
##### Prepare vector to indicate chromosome boundaries
chr_lines <- rep(0, nrow(cnData.subset.sel))
chr_lines[ chr_annot$count - 1 ] <- 1
chr_lines[ chr_annot$count ] <- -1
##### Prepare data for plotting with plotly
data2plot <- data.frame(rownames(cnData.subset.sel), cnData.subset.sel$Loss, cnData.subset.sel$Gain, chr_lines)
colnames(data2plot) <- c("Gene", "Loss", "Gain", "Chr_line")
##### Use the genomic positions order for bars
data2plot$Gene <- factor(data2plot$Gene, levels = data2plot$Gene)
p <- plot_ly(data2plot, x = ~Gene, y = ~Gain, type = 'bar', name = "Gain", color = I("red"), width = 800, height = 400) %>%
add_trace(y = ~Loss, name = "Loss", color = I("blue")) %>%
add_trace(x = ~Gene, y = ~Chr_line, type = 'scatter', name = "Chromosomes", mode = 'lines', line = list(color = "lightgrey", dash = "1px"), hoverinfo = "skip") %>%
layout( title = target.sel, yaxis = list(title = "Fraction of samples"), xaxis = list(title = "Chromosome number", showticklabels = FALSE), annotations = chr_nos, barmode = 'group', bargap = 0, margin = list(l=50, r=50, b=100, t=50, pad=4), autosize = F, legend = list(orientation = 'h', y = 1.07, tracegroupgap=0), showlegend=TRUE)
##### Save the frequency plot as html (PLOTLY)
widget_fn = paste(outFolder,paste0("frequency_plot_",j,"_",i,".html"),sep="/")
htmlwidgets::saveWidget(p, widget_fn)
}
for(i in 1:length(unique(targets))) {
##### Select samples from the group
target.sel <- unique(sort(targets, decreasing = TRUE))[i]
cnData.subset.sel <- cnData.subset[ targets %in%  target.sel    ]
##### Add genomic info
cnData.subset.sel <- cbind(cnData.pos, cnData.subset.sel)
cnData.subset.sel$Loss=rep(0,length(nrow(cnData.subset.sel)))
cnData.subset.sel$Gain=rep(0,length(nrow(cnData.subset.sel)))
##### Order the data accordingly to genomic postions
cnData.subset.sel = cnData.subset.sel[order(as.numeric(cnData.subset.sel$Chromosome),as.numeric(cnData.subset.sel$Position)),]
##### Count number of samples with gains/losses at each position (segment mean > 0.5 or <= -05, respectively)
gainSum <- rowSums(cnData.subset.sel[,c(3:ncol(cnData.subset.sel))] > 0.5)/(ncol(cnData.subset.sel)-4)
lossSum <- rowSums(cnData.subset.sel[,c(3:ncol(cnData.subset.sel))] <= -0.5)/(ncol(cnData.subset.sel)-4)
##### Get frequency values
cnData.subset.sel[,"Gain"] = gainSum
cnData.subset.sel[,"Loss"] = -lossSum
##### Label chromosomes
chr_bins <- data.matrix(summary(as.factor(cnData.subset.sel$Chromosome)))
chr_bins<- data.frame(chr_bins,row.names(chr_bins) )
colnames(chr_bins) = c("count","Chromosome")
data.chr_bins <- data.frame(unique(cnData.subset.sel$Chromosome))
colnames(data.chr_bins) = c("Chromosome")
chr_annot <- merge(data.chr_bins,chr_bins, by.x="Chromosome", by.y="Chromosome", sort=FALSE)
for(k in 2:length(row.names(chr_annot))) {
chr_annot[k,2] = chr_annot[k-1,2] + chr_annot[k,2]
}
chr_annot[1,3] <- chr_annot[1,2] / 2
for (k in 2:length(row.names(chr_annot))) {
chr_annot[k,3] <- (chr_annot[k,2]+chr_annot[k-1,2])/2
}
##### Create a list with chromosme boundaries info
levels(chr_annot$Chromosome)[ levels(chr_annot$Chromosome) == 23 ] <- "X"
chr_nos <- list( x = chr_annot[, 3], y = -1.1, text = chr_annot$Chromosome, xref = "x", yref = "y", showarrow = FALSE )
##### Prepare vector to indicate chromosome boundaries
chr_lines <- rep(0, nrow(cnData.subset.sel))
chr_lines[ chr_annot[, 2] - 1 ] <- 1
chr_lines[ chr_annot[, 2] ] <- -1
##### Prepare data for plotting with plotly
data2plot <- data.frame(rownames(cnData.subset.sel), cnData.subset.sel$Loss, cnData.subset.sel$Gain, chr_lines)
colnames(data2plot) <- c("Gene", "Loss", "Gain", "Chr_line")
##### Use the genomic positions order for bars
data2plot$Gene <- factor(data2plot$Gene, levels = data2plot$Gene)
p <- plot_ly(data2plot, x = ~Gene, y = ~Gain, type = 'bar', name = "Gain", color = I("red"), width = 800, height = 400) %>%
add_trace(y = ~Loss, name = "Loss", color = I("blue")) %>%
add_trace(x = ~Gene, y = ~Chr_line, type = 'scatter', name = "Chromosomes", mode = 'lines', line = list(color = "lightgrey", dash = "1px"), hoverinfo = "skip") %>%
layout( title = target.sel, yaxis = list(title = "Fraction of samples"), xaxis = list(title = "Chromosome number", showticklabels = FALSE), annotations = chr_nos, barmode = 'group', bargap = 0, margin = list(l=50, r=50, b=100, t=50, pad=4), autosize = F, legend = list(orientation = 'h', y = 1.07, tracegroupgap=0), showlegend=TRUE)
##### Save the frequency plot as html (PLOTLY)
widget_fn = paste(outFolder,paste0("frequency_plot_",j,"_",i,".html"),sep="/")
htmlwidgets::saveWidget(p, widget_fn)
}
for(i in 1:length(unique(targets))) {
##### Select samples from the group
target.sel <- unique(sort(targets, decreasing = TRUE))[i]
cnData.subset.sel <- cnData.subset[ targets %in%  target.sel    ]
##### Add genomic info
cnData.subset.sel <- cbind(cnData.pos, cnData.subset.sel)
cnData.subset.sel$Loss=rep(0,length(nrow(cnData.subset.sel)))
cnData.subset.sel$Gain=rep(0,length(nrow(cnData.subset.sel)))
##### Order the data accordingly to genomic postions
cnData.subset.sel = cnData.subset.sel[order(as.numeric(cnData.subset.sel$Chromosome),as.numeric(cnData.subset.sel$Position)),]
##### Count number of samples with gains/losses at each position (segment mean > 0.5 or <= -05, respectively)
gainSum <- rowSums(cnData.subset.sel[,c(3:ncol(cnData.subset.sel))] > 0.5)/(ncol(cnData.subset.sel)-4)
lossSum <- rowSums(cnData.subset.sel[,c(3:ncol(cnData.subset.sel))] <= -0.5)/(ncol(cnData.subset.sel)-4)
##### Get frequency values
cnData.subset.sel[,"Gain"] = gainSum
cnData.subset.sel[,"Loss"] = -lossSum
##### Label chromosomes
chr_bins <- data.matrix(summary(as.factor(cnData.subset.sel$Chromosome)))
chr_bins<- data.frame(chr_bins,row.names(chr_bins) )
colnames(chr_bins) = c("count","Chromosome")
data.chr_bins <- data.frame(unique(cnData.subset.sel$Chromosome))
colnames(data.chr_bins) = c("Chromosome")
chr_annot <- merge(data.chr_bins,chr_bins, by.x="Chromosome", by.y="Chromosome", sort=FALSE)
for(k in 2:length(row.names(chr_annot))) {
chr_annot[k,2] = chr_annot[k-1,2] + chr_annot[k,2]
}
chr_annot[1,3] <- chr_annot[1,2] / 2
for (k in 2:length(row.names(chr_annot))) {
chr_annot[k,3] <- (chr_annot[k,2]+chr_annot[k-1,2])/2
}
##### Create a list with chromosme boundaries info
#levels(chr_annot$Chromosome)[ levels(chr_annot$Chromosome) == 23 ] <- "X"
chr_nos <- list( x = chr_annot[, 3], y = -1.1, text = chr_annot$Chromosome, xref = "x", yref = "y", showarrow = FALSE )
##### Prepare vector to indicate chromosome boundaries
chr_lines <- rep(0, nrow(cnData.subset.sel))
chr_lines[ chr_annot$count - 1 ] <- 1
chr_lines[ chr_annot$count ] <- -1
##### Prepare data for plotting with plotly
data2plot <- data.frame(rownames(cnData.subset.sel), cnData.subset.sel$Loss, cnData.subset.sel$Gain, chr_lines)
colnames(data2plot) <- c("Gene", "Loss", "Gain", "Chr_line")
##### Use the genomic positions order for bars
data2plot$Gene <- factor(data2plot$Gene, levels = data2plot$Gene)
p <- plot_ly(data2plot, x = ~Gene, y = ~Gain, type = 'bar', name = "Gain", color = I("red"), width = 800, height = 400) %>%
add_trace(y = ~Loss, name = "Loss", color = I("blue")) %>%
add_trace(x = ~Gene, y = ~Chr_line, type = 'scatter', name = "Chromosomes", mode = 'lines', line = list(color = "lightgrey", dash = "1px"), hoverinfo = "skip") %>%
layout( title = target.sel, yaxis = list(title = "Fraction of samples"), xaxis = list(title = "Chromosome number", showticklabels = FALSE), annotations = chr_nos, barmode = 'group', bargap = 0, margin = list(l=50, r=50, b=100, t=50, pad=4), autosize = F, legend = list(orientation = 'h', y = 1.07, tracegroupgap=0), showlegend=TRUE)
##### Save the frequency plot as html (PLOTLY)
widget_fn = paste(outFolder,paste0("frequency_plot_",j,"_",i,".html"),sep="/")
htmlwidgets::saveWidget(p, widget_fn)
}
ef = paste(outFolder,"norm_files",cn_files[j],sep = "/")
##### Read file with copy-number data
cnData <- read.table(ef,sep="\t",header=TRUE,row.names=NULL, stringsAsFactors = FALSE)
###### Deal with the duplicated genes
cnData <- duplGenes(cnData)
######  Keep genomic info separately
cnData.pos <- cnData[, c(1:2)]
cnData <- cnData[, c(3:ncol(cnData))]
###### Change chromosomes X and Y to numbers 23 and 24, respectively
cnData.pos$Chromosome[ cnData.pos$Chromosome  %in% "X" ] <- 23
cnData.pos$Chromosome[ cnData.pos$Chromosome %in% "Y" ] <- 24
###### Check samples present in current dataset
selected_samples <- intersect(as.character(annData$Sample_Name),colnames(cnData))
cnData.subset <- cnData[,colnames(cnData) %in% selected_samples]
##### Make sure that the sample order is the same as in the target file
cnData.subset <- cnData.subset[ , selected_samples ]
targets <- subset(annData, Sample_Name %in% colnames(cnData.subset))[,target]
##### This plot is not necessary, it's only to get an idea about the relative linear copy-number values #####
##### Draw histogram of correlation coefficients (PLOTLY)
#p <- plot_ly(x = ~unlist(cnData.subset), type = 'histogram', width = 800, height = 500) %>%
#layout(xaxis = list( title = "Relative linear copy-number values"), yaxis = list( title = "Frequency"), margin = list(l=50, r=50, b=50, t=50, pad=4), autosize = F)
#
##### Save the histogram as html (PLOTLY)
#htmlwidgets::saveWidget(as_widget(p), "cn_hist.html")
#===============================================================================
#    Generate frequency plot for each group separately
#===============================================================================
for(i in 1:length(unique(targets))) {
##### Select samples from the group
target.sel <- unique(sort(targets, decreasing = TRUE))[i]
cnData.subset.sel <- cnData.subset[ targets %in%  target.sel    ]
##### Add genomic info
cnData.subset.sel <- cbind(cnData.pos, cnData.subset.sel)
cnData.subset.sel$Loss=rep(0,length(nrow(cnData.subset.sel)))
cnData.subset.sel$Gain=rep(0,length(nrow(cnData.subset.sel)))
##### Order the data accordingly to genomic postions
cnData.subset.sel = cnData.subset.sel[order(as.numeric(cnData.subset.sel$Chromosome),as.numeric(cnData.subset.sel$Position)),]
##### Count number of samples with gains/losses at each position (segment mean > 0.5 or <= -05, respectively)
gainSum <- rowSums(cnData.subset.sel[,c(3:ncol(cnData.subset.sel))] > 0.5)/(ncol(cnData.subset.sel)-4)
lossSum <- rowSums(cnData.subset.sel[,c(3:ncol(cnData.subset.sel))] <= -0.5)/(ncol(cnData.subset.sel)-4)
##### Get frequency values
cnData.subset.sel[,"Gain"] = gainSum
cnData.subset.sel[,"Loss"] = -lossSum
##### Label chromosomes
chr_bins <- data.matrix(summary(as.factor(cnData.subset.sel$Chromosome)))
chr_bins<- data.frame(chr_bins,row.names(chr_bins) )
colnames(chr_bins) = c("count","Chromosome")
data.chr_bins <- data.frame(unique(cnData.subset.sel$Chromosome))
colnames(data.chr_bins) = c("Chromosome")
chr_annot <- merge(data.chr_bins,chr_bins, by.x="Chromosome", by.y="Chromosome", sort=FALSE)
for(k in 2:length(row.names(chr_annot))) {
chr_annot[k,2] = chr_annot[k-1,2] + chr_annot[k,2]
}
chr_annot[1,3] <- chr_annot[1,2] / 2
for (k in 2:length(row.names(chr_annot))) {
chr_annot[k,3] <- (chr_annot[k,2]+chr_annot[k-1,2])/2
}
##### Create a list with chromosme boundaries info
#levels(chr_annot$Chromosome)[ levels(chr_annot$Chromosome) == 23 ] <- "X"
chr_nos <- list( x = chr_annot[, 3], y = -1.1, text = chr_annot$Chromosome, xref = "x", yref = "y", showarrow = FALSE )
##### Prepare vector to indicate chromosome boundaries
chr_lines <- rep(0, nrow(cnData.subset.sel))
chr_lines[ chr_annot$count - 1 ] <- 1
chr_lines[ chr_annot$count ] <- -1
##### Prepare data for plotting with plotly
data2plot <- data.frame(rownames(cnData.subset.sel), cnData.subset.sel$Loss, cnData.subset.sel$Gain, chr_lines)
colnames(data2plot) <- c("Gene", "Loss", "Gain", "Chr_line")
##### Use the genomic positions order for bars
data2plot$Gene <- factor(data2plot$Gene, levels = data2plot$Gene)
p <- plot_ly(data2plot, x = ~Gene, y = ~Gain, type = 'bar', name = "Gain", color = I("red"), width = 800, height = 400) %>%
add_trace(y = ~Loss, name = "Loss", color = I("blue")) %>%
add_trace(x = ~Gene, y = ~Chr_line, type = 'scatter', name = "Chromosomes", mode = 'lines', line = list(color = "lightgrey", dash = "1px"), hoverinfo = "skip") %>%
layout( title = target.sel, yaxis = list(title = "Fraction of samples"), xaxis = list(title = "Chromosome number", showticklabels = FALSE), annotations = chr_nos, barmode = 'group', bargap = 0, margin = list(l=50, r=50, b=100, t=50, pad=4), autosize = F, legend = list(orientation = 'h', y = 1.07, tracegroupgap=0), showlegend=TRUE)
##### Save the frequency plot as html (PLOTLY)
widget_fn = paste(outFolder,paste0("frequency_plot_",j,"_",i,".html"),sep="/")
htmlwidgets::saveWidget(p, widget_fn)
}
ef = paste(outFolder,"norm_files",cn_files[j],sep = "/")
##### Read file with copy-number data
cnData <- read.table(ef,sep="\t",header=TRUE,row.names=NULL, stringsAsFactors = FALSE)
###### Deal with the duplicated genes
cnData <- duplGenes(cnData)
######  Keep genomic info separately
cnData.pos <- cnData[, c(1:2)]
cnData <- cnData[, c(3:ncol(cnData))]
###### Change chromosomes X and Y to numbers 23 and 24, respectively
cnData.pos$Chromosome[ cnData.pos$Chromosome  %in% "X" ] <- 23
cnData.pos$Chromosome[ cnData.pos$Chromosome %in% "Y" ] <- 24
###### Check samples present in current dataset
selected_samples <- intersect(as.character(annData$Sample_Name),colnames(cnData))
cnData.subset <- cnData[,colnames(cnData) %in% selected_samples]
##### Make sure that the sample order is the same as in the target file
cnData.subset <- cnData.subset[ , selected_samples ]
targets <- subset(annData, Sample_Name %in% colnames(cnData.subset))[,target]
##### This plot is not necessary, it's only to get an idea about the relative linear copy-number values #####
##### Draw histogram of correlation coefficients (PLOTLY)
#p <- plot_ly(x = ~unlist(cnData.subset), type = 'histogram', width = 800, height = 500) %>%
#layout(xaxis = list( title = "Relative linear copy-number values"), yaxis = list( title = "Frequency"), margin = list(l=50, r=50, b=50, t=50, pad=4), autosize = F)
#
##### Save the histogram as html (PLOTLY)
#htmlwidgets::saveWidget(as_widget(p), "cn_hist.html")
#===============================================================================
#    Generate frequency plot for each group separately
#===============================================================================
for(i in 1:length(unique(targets))) {
##### Select samples from the group
target.sel <- unique(sort(targets, decreasing = TRUE))[i]
cnData.subset.sel <- cnData.subset[ targets %in%  target.sel    ]
##### Add genomic info
cnData.subset.sel <- cbind(cnData.pos, cnData.subset.sel)
cnData.subset.sel$Loss=rep(0,length(nrow(cnData.subset.sel)))
cnData.subset.sel$Gain=rep(0,length(nrow(cnData.subset.sel)))
##### Order the data accordingly to genomic postions
cnData.subset.sel = cnData.subset.sel[order(as.numeric(cnData.subset.sel$Chromosome),as.numeric(cnData.subset.sel$Position)),]
##### Count number of samples with gains/losses at each position (segment mean > 0.5 or <= -05, respectively)
gainSum <- rowSums(cnData.subset.sel[,c(3:ncol(cnData.subset.sel))] > 0.5)/(ncol(cnData.subset.sel)-4)
lossSum <- rowSums(cnData.subset.sel[,c(3:ncol(cnData.subset.sel))] <= -0.5)/(ncol(cnData.subset.sel)-4)
##### Get frequency values
cnData.subset.sel[,"Gain"] = gainSum
cnData.subset.sel[,"Loss"] = -lossSum
##### Label chromosomes
chr_bins <- data.matrix(summary(as.factor(cnData.subset.sel$Chromosome)))
chr_bins<- data.frame(chr_bins,row.names(chr_bins) )
colnames(chr_bins) = c("count","Chromosome")
data.chr_bins <- data.frame(unique(cnData.subset.sel$Chromosome))
colnames(data.chr_bins) = c("Chromosome")
chr_annot <- merge(data.chr_bins,chr_bins, by.x="Chromosome", by.y="Chromosome", sort=FALSE)
for(k in 2:length(row.names(chr_annot))) {
chr_annot[k,2] = chr_annot[k-1,2] + chr_annot[k,2]
}
chr_annot[1,3] <- chr_annot[1,2] / 2
for (k in 2:length(row.names(chr_annot))) {
chr_annot[k,3] <- (chr_annot[k,2]+chr_annot[k-1,2])/2
}
##### Create a list with chromosme boundaries info
levels(chr_annot$Chromosome)[ levels(chr_annot$Chromosome) == 23 ] <- "X"
chr_nos <- list( x = chr_annot[, 3], y = -1.1, text = chr_annot$Chromosome, xref = "x", yref = "y", showarrow = FALSE )
##### Prepare vector to indicate chromosome boundaries
chr_lines <- rep(0, nrow(cnData.subset.sel))
chr_lines[ chr_annot$count - 1 ] <- 1
chr_lines[ chr_annot$count ] <- -1
##### Prepare data for plotting with plotly
data2plot <- data.frame(rownames(cnData.subset.sel), cnData.subset.sel$Loss, cnData.subset.sel$Gain, chr_lines)
colnames(data2plot) <- c("Gene", "Loss", "Gain", "Chr_line")
##### Use the genomic positions order for bars
data2plot$Gene <- factor(data2plot$Gene, levels = data2plot$Gene)
p <- plot_ly(data2plot, x = ~Gene, y = ~Gain, type = 'bar', name = "Gain", color = I("red"), width = 800, height = 400) %>%
add_trace(y = ~Loss, name = "Loss", color = I("blue")) %>%
add_trace(x = ~Gene, y = ~Chr_line, type = 'scatter', name = "Chromosomes", mode = 'lines', line = list(color = "lightgrey", dash = "1px"), hoverinfo = "skip") %>%
layout( title = target.sel, yaxis = list(title = "Fraction of samples"), xaxis = list(title = "Chromosome number", showticklabels = FALSE), annotations = chr_nos, barmode = 'group', bargap = 0, margin = list(l=50, r=50, b=100, t=50, pad=4), autosize = F, legend = list(orientation = 'h', y = 1.07, tracegroupgap=0), showlegend=TRUE)
##### Save the frequency plot as html (PLOTLY)
widget_fn = paste(outFolder,paste0("frequency_plot_",j,"_",i,".html"),sep="/")
htmlwidgets::saveWidget(p, widget_fn)
}
setdiff
ef = paste(outFolder,"norm_files",cn_files[j],sep = "/")
##### Read file with copy-number data
cnData <- read.table(ef,sep="\t",header=TRUE,row.names=NULL, stringsAsFactors = FALSE)
###### Deal with the duplicated genes
cnData <- duplGenes(cnData)
setdiff(intersect(as.character(annData$Sample_Name),colnames(cnData)))
setdiff(as.character(annData$Sample_Name),colnames(cnData))
setdiff(colnames(cnData),as.character(annData$Sample_Name))
q()
##### Clear workspace
rm(list=ls())
##### Close any open graphics devices
graphics.off()
### Setting environment for pandoc
Sys.setenv(HOME = "")
#===============================================================================
#    Functions
#===============================================================================
##### Create 'not in' operator
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0
##### Deal with the duplicated genes
duplGenes <- function(expData) {
genesList <- NULL
genesRepl <- NULL
for ( i in 1:nrow(expData) ) {
geneName <- expData[i,1]
##### Distingish duplicated genes by adding duplicate number
if ( geneName %in% genesList ) {
##### Report genes with more than one duplicates
if ( geneName %in% names(genesRepl) ) {
genesRepl[[ geneName ]] = genesRepl[[ geneName ]]+1
geneName <- paste(geneName, "-", genesRepl[[ geneName ]], sep="")
} else {
genesRepl[[ geneName ]] <- 2
geneName <- paste(geneName, "-2", sep="")
}
}
genesList <- c(genesList,geneName)
}
rownames(expData) <- genesList
##### Remove the first column with gene names, which now are used as row names
expData <- expData[, -1]
return(expData)
}
#===============================================================================
#    Load libraries
#===============================================================================
suppressMessages(library(plotly))
suppressMessages(library(heatmaply))
suppressMessages(library(optparse))
cnFile="cn_chr_pos.csv"
annFile="cn_target.txt"
target="Target"
outFolder="/Users/marzec01/Desktop/git/PED_bioinformatics_portal/PED_Analytics/ped_backoffice/data/ccle"
cn_files = unlist(strsplit(cnFile, ","))
##### Read sample annotation file
annData <- read.table(paste(outFolder,annFile,sep = "/"),sep="\t",as.is=TRUE,header=TRUE)
annData$Sample_Name <- make.names(annData$Sample_Name)
annData
j=1
ef = paste(outFolder,"norm_files",cn_files[j],sep = "/")
##### Read file with copy-number data
cnData <- read.table(ef,sep="\t",header=TRUE,row.names=NULL, stringsAsFactors = FALSE)
###### Deal with the duplicated genes
cnData <- duplGenes(cnData)
head(cnData)
q()
##### Clear workspace
rm(list=ls())
##### Close any open graphics devices
graphics.off()
### Setting environment for pandoc
Sys.setenv(HOME = "")
#===============================================================================
#    Functions
#===============================================================================
##### Create 'not in' operator
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0
##### Deal with the duplicated genes
duplGenes <- function(expData) {
genesList <- NULL
genesRepl <- NULL
for ( i in 1:nrow(expData) ) {
geneName <- expData[i,1]
##### Distingish duplicated genes by adding duplicate number
if ( geneName %in% genesList ) {
##### Report genes with more than one duplicates
if ( geneName %in% names(genesRepl) ) {
genesRepl[[ geneName ]] = genesRepl[[ geneName ]]+1
geneName <- paste(geneName, "-", genesRepl[[ geneName ]], sep="")
} else {
genesRepl[[ geneName ]] <- 2
geneName <- paste(geneName, "-2", sep="")
}
}
genesList <- c(genesList,geneName)
}
rownames(expData) <- genesList
##### Remove the first column with gene names, which now are used as row names
expData <- expData[, -1]
return(expData)
}
##### Assign colours to analysed groups
getTargetsColours <- function(targets) {
##### Predefined selection of colours for groups
targets.colours <- c("red","blue","green","darkgoldenrod","darkred","deepskyblue", "coral", "cornflowerblue", "chartreuse4", "bisque4", "chocolate3", "cadetblue3", "darkslategrey", "lightgoldenrod4", "mediumpurple4", "orangered3")
f.targets <- factor(targets)
vec.targets <- targets.colours[1:length(levels(f.targets))]
targets.colour <- rep(0,length(f.targets))
for(i in 1:length(f.targets))
targets.colour[i] <- vec.targets[ f.targets[i]==levels(f.targets)]
return( list(vec.targets, targets.colour) )
}
#===============================================================================
#    Load libraries
#===============================================================================
suppressMessages(library(plotly))
suppressMessages(library(heatmaply))
suppressMessages(library(optparse))
cn_files="/Users/marzec01/Desktop/git/PED_bioinformatics_portal/PED_Analytics/ped_backoffice/data/ccle/norm_files/cn_chr_pos.csv"
annFile="/Users/marzec01/Desktop/git/PED_bioinformatics_portal/PED_Analytics/ped_backoffice/data/ccle/cn_target.txt"
gene_list="KRAS,TP53,SMAD4,CDKN2A"
target="Target"
outFolder="/Users/marzec01/Desktop/git/PED_bioinformatics_portal/PED_Analytics/ped_backoffice/data/ccle"
hexcode="Fgdfgfsg"
cn_files = unlist(strsplit(cnFile, ","))
##### Read sample annotation file
annData <- read.table(annFile,sep="\t",as.is=TRUE,header=TRUE)
annData$Sample_Name <- make.names(annData$Sample_Name)
##### Read gene list
genes = unlist(strsplit(gene_list, ","))
cnFile
cnFile="cnFile"
cnFile="/Users/marzec01/Desktop/git/PED_bioinformatics_portal/PED_Analytics/ped_backoffice/data/ccle/norm_files/cn_chr_pos.csv"
cn_files = unlist(strsplit(cnFile, ","))
##### Read sample annotation file
annData <- read.table(annFile,sep="\t",as.is=TRUE,header=TRUE)
annData$Sample_Name <- make.names(annData$Sample_Name)
##### Read gene list
genes = unlist(strsplit(gene_list, ","))
#ef = paste(outFolder,"norm_files",cn_files[j],sep = "/")
ef = cn_files[j]
##### Read file with copy-number data
cnData <- read.table(ef,sep="\t",header=TRUE,row.names=NULL, stringsAsFactors = FALSE)
###### Deal with the duplicated genes
cnData <- duplGenes(cnData)
###### Keep only the copy-number data
cnData <- cnData[, c(3:ncol(cnData))]
###### Check samples present in current dataset
selected_samples <- intersect(as.character(annData$Sample_Name),colnames(cnData))
cnData.subset <- cnData[,colnames(cnData) %in% selected_samples]
##### Make sure that the sample order is the same as in the target file
cnData.subset <- cnData.subset[ , selected_samples ]
targets <- subset(annData, Sample_Name %in% colnames(cnData.subset))[,target]
j1
j=1
#ef = paste(outFolder,"norm_files",cn_files[j],sep = "/")
ef = cn_files[j]
##### Read file with copy-number data
cnData <- read.table(ef,sep="\t",header=TRUE,row.names=NULL, stringsAsFactors = FALSE)
###### Deal with the duplicated genes
cnData <- duplGenes(cnData)
###### Keep only the copy-number data
cnData <- cnData[, c(3:ncol(cnData))]
###### Check samples present in current dataset
selected_samples <- intersect(as.character(annData$Sample_Name),colnames(cnData))
cnData.subset <- cnData[,colnames(cnData) %in% selected_samples]
##### Make sure that the sample order is the same as in the target file
cnData.subset <- cnData.subset[ , selected_samples ]
targets <- subset(annData, Sample_Name %in% colnames(cnData.subset))[,target]
##### Keep only genes of interest
cnData.subset <- cnData.subset[genes, ]
##### Identify genes of interest not present in the expression matrix
absentGenes <- genes[genes %!in% rownames(cnData.subset)]
##### Change working directory to the project workspace
setwd(outFolder)
##### Assign gain for linear CN values above 0.5 and loss for linear CN values below -0.5
cnData.subset[ cnData.subset > 0.5 ] <- 1
cnData.subset[ cnData.subset < -0.5 ] <- -1
cnData.subset[ cnData.subset <= 0.5 & cnData.subset >= -0.5 ] <- 0
##### Set the heatmap hight based on the number of queried genes
if ( length(genes) > 2 ) {
hheight <- length(genes)*100
} else {
hheight <- 300
}
##### Cluster samples
hc <- hclust(as.dist(dist(data.frame(t(cnData.subset)), method="euclidean")), method="ward.D")
##### Generate heatmap (PLOTLY)
p <- heatmaply(data.frame(cnData.subset ), Rowv=NULL, Colv=as.dendrogram(hc), colors = c("blue", "white", "red"), scale="none", trace="none", hide_colorbar = TRUE, fontsize_row = 8, fontsize_col = 8, showticklabels=c(TRUE, TRUE)) %>%
layout(autosize = FALSE, width = 800, height = hheight,  margin = list(l=100, r=50, b=150, t=50, pad=4), showlegend = FALSE)
##### Save the heatmap as html (PLOTLY)
#widget_fn = paste0(hexcode,"_heatmap_",j,".html")
widget_fn = paste0(hexcode,"_hm.html")
htmlwidgets::saveWidget(p, widget_fn)
##### Prepare object to write into a file
prepare2write <- function (x) {
x2write <- cbind(rownames(x), x)
colnames(x2write) <- c("",colnames(x))
return(x2write)
}
View(cnData.subset)
cnData.subset[ cnData.subset == 1 ] <- "gain"
cnData.subset[ cnData.subset == -1 ] <- "loss"
cnData.subset[ cnData.subset == 0 ] <- "diploid"
genes
write.table(prepare2write(cnData.subset), file=paste0(hexcode,"_cna.txt"), sep="\t", row.names=FALSE)
hc
as.dendrogram(hc)
cutree(hc, h=10)
as.dendrogram(hc)
hc$order
head(nData.subset[ , hc$order])
head(cnData.subset[ , hc$order])
rev(hc$order)
head(cnData.subset[ , rev(hc$order)])
cnData.subset <- cnData.subset[ , rev(hc$order)]
##### Write the annotated copy-number data into a file
write.table(prepare2write(cnData.subset), file=paste0(hexcode,"_cna.txt"), sep="\t", row.names=FALSE)
q()
