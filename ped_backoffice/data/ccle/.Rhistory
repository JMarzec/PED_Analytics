##### Remove the first column with gene names, which now are used as row names
expData <- expData[, -1]
return(expData)
}
#===============================================================================
#    Load libraries
#===============================================================================
suppressMessages(library(plotly))
suppressMessages(library(heatmaply))
suppressMessages(library(optparse))
cnFile="cn_chr_pos.csv"
annFile="cn_target.txt"
target="Target"
outFolder="/Users/marzec01/Desktop/git/PED_bioinformatics_portal/PED_Analytics/ped_backoffice/data/ccle"
cn_files = unlist(strsplit(cnFile, ","))
##### Read sample annotation file
annData <- read.table(paste(outFolder,annFile,sep = "/"),sep="\t",as.is=TRUE,header=TRUE)
annData$Sample_Name <- make.names(annData$Sample_Name)
annData
j=1
ef = paste(outFolder,"norm_files",cn_files[j],sep = "/")
##### Read file with copy-number data
cnData <- read.table(ef,sep="\t",header=TRUE,row.names=NULL, stringsAsFactors = FALSE)
###### Deal with the duplicated genes
cnData <- duplGenes(cnData)
head(cnData)
q()
##### Clear workspace
rm(list=ls())
##### Close any open graphics devices
graphics.off()
### Setting environment for pandoc
Sys.setenv(HOME = "")
#===============================================================================
#    Functions
#===============================================================================
##### Create 'not in' operator
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0
##### Prepare object to write into a file
prepare2write <- function (x) {
x2write <- cbind(rownames(x), x)
colnames(x2write) <- c("",colnames(x))
return(x2write)
}
##### Deal with the duplicated genes
duplGenes <- function(expData) {
genesList <- NULL
genesRepl <- NULL
for ( i in 1:nrow(expData) ) {
geneName <- expData[i,1]
##### Distingish duplicated genes by adding duplicate number
if ( geneName %in% genesList ) {
##### Report genes with more than one duplicates
if ( geneName %in% names(genesRepl) ) {
genesRepl[[ geneName ]] = genesRepl[[ geneName ]]+1
geneName <- paste(geneName, "-", genesRepl[[ geneName ]], sep="")
} else {
genesRepl[[ geneName ]] <- 2
geneName <- paste(geneName, "-2", sep="")
}
}
genesList <- c(genesList,geneName)
}
rownames(expData) <- genesList
##### Remove the first column with gene names, which now are used as row names
expData <- expData[, -1]
return(expData)
}
suppressMessages(library(plotly))
suppressMessages(library(optparse))
suppressMessages(library(biomaRt))
expFile="gene_exp.csv"
annFile="cn_target.txt"
outFolder="/Users/marzec01/Desktop/git/PED_bioinformatics_portal/PED_Analytics/ped_backoffice/data/ccle"
exp_files = unlist(strsplit(expFile, ","))
annData <- read.table(annFile,sep="\t",as.is=TRUE,header=TRUE)
annData <- read.table( paste(outFolder,annFile,sep = "/"),sep="\t",as.is=TRUE,header=TRUE)
head(annData)
annData$Sample_Name <- make.names(annData$Sample_Name)
head(annData)
ef = paste(outFolder,"norm_files",exp_files[j],sep = "/")
##### Read file with expression data
expData <- read.table(ef,sep="\t",header=TRUE,row.names=NULL, stringsAsFactors = FALSE)
###### Deal with the duplicated genes
expData <- duplGenes(expData)
j=1
ef = paste(outFolder,"norm_files",exp_files[j],sep = "/")
##### Read file with expression data
expData <- read.table(ef,sep="\t",header=TRUE,row.names=NULL, stringsAsFactors = FALSE)
###### Deal with the duplicated genes
expData <- duplGenes(expData)
mart = useMart(biomart = "ENSEMBL_MART_ENSEMBL",dataset="hsapiens_gene_ensembl",host = "jul2015.archive.ensembl.org")
#listFilters(mart)
#listAttributes(mart)
###### Set filters and attributes for BioMart
theFilters = c("hgnc_symbol", "chromosome_name")
theAttributes = c("hgnc_symbol", "chromosome_name","start_position","end_position")
###### Retrieve the gene annotation
annot <- getBM(attributes=theAttributes,filters=theFilters,values=list(rownames(expData), c(1:22,"X","Y")),mart=mart)
###### remove duplicated genes
annot <- annot[!duplicated(annot["hgnc_symbol"]),]
###### Get genes present in the data and annotation object
annot_genes <- intersect(annot$hgnc_symbol,rownames(expData))
expData.subset <- expData[rownames(expData) %in% annot_genes, ]
annot <- annot[ annot$hgnc_symbol %in% annot_genes, ]
rownames(annot) <- annot$hgnc_symbol
annot <- annot[,-1]
##### Make sure that the genes order is the same as in the annotation object
expData.subset <- expData.subset[ rownames(annot), ]
##### Combine the annotation and expression data
expData.annot <- cbind(annot, expData.subset)
head(expData.annot)
tail()
tail(expData.annot)
head(expData.subset)
head(annot)
target="Target"
targets <- annData[,target]
targets
length(unique(targets))
target.sel <- unique(sort(targets, decreasing = TRUE))[i]
i=1
target.sel <- unique(sort(targets, decreasing = TRUE))[i]
target.sel
expData.subset.sel <- expData.subset[ targets %in%  target.sel ]
dim(expData.subset.sel)
targets
target.sel
targets %in%  target.sel
selected_samples <- intersect(as.character(annData$Sample_Name),colnames(expData))
selected_samples
cnData.subset <- expData[,colnames(expData) %in% selected_samples]
dim(cnData.subset)
dim(annData)
expData.subset <- expData[,colnames(expData) %in% selected_samples]
dim(expData.subset)
expData.subset <- expData.subset[ , selected_samples ]
dim(expData.subset)
targets
targets <- subset(annData, Sample_Name %in% colnames(expData.subset))[,target]
targets
mart = useMart(biomart = "ENSEMBL_MART_ENSEMBL",dataset="hsapiens_gene_ensembl",host = "jul2015.archive.ensembl.org")
#listFilters(mart)
#listAttributes(mart)
###### Set filters and attributes for BioMart
theFilters = c("hgnc_symbol", "chromosome_name")
theAttributes = c("hgnc_symbol", "chromosome_name","start_position","end_position")
###### Retrieve the gene annotation
annot <- getBM(attributes=theAttributes,filters=theFilters,values=list(rownames(expData.subset), c(1:22,"X","Y")),mart=mart)
###### remove duplicated genes
annot <- annot[!duplicated(annot["hgnc_symbol"]),]
###### Get genes present in the data and annotation object
annot_genes <- intersect(annot$hgnc_symbol,rownames(expData.subset))
expData.subset <- expData.subset[rownames(expData.subset) %in% annot_genes, ]
annot <- annot[ annot$hgnc_symbol %in% annot_genes, ]
rownames(annot) <- annot$hgnc_symbol
annot <- annot[,-1]
##### Make sure that the genes order is the same as in the annotation object
expData.subset <- expData.subset[ rownames(annot), ]
dim(expData.subset)
head(expData.subset)
targets <- annData[,target]
targets
target.sel <- unique(sort(targets, decreasing = TRUE))[i]
expData.subset.sel <- expData.subset[ targets %in%  target.sel ]
dim(expData.subset.sel)
head(expData.subset.sel)
expData.subset.z <- NULL
expData.subset.sel.z <- as.data.frame(t(scale(data.matrix(t(expData.subset.sel)))))
head(expData.subset.sel.z)
hist(as.numeric(expData.subset.sel.z))
hist(as.numeric(expData.subset.sel.z[1,]))
hist(as.numeric(expData.subset.sel.z[,1]))
plot(as.numeric(expData.subset.sel.z[1,]), as.numeric(expData.subset.sel.[1,]))
plot(as.numeric(expData.subset.sel.z[1,]), as.numeric(expData.subset.sel[1,]))
expData.subset.z <- annot
head(expData.subset.z)
head(expData.subset.sel.z )
expData.subset.sel.median <- rowMedians(expData.subset.sel.z)
library(Biobase)
expData.subset.sel.median <- rowMedians(expData.subset.sel.z)
is.data.frame(expData.subset.sel.z)
expData.subset.sel.median <- rowMedians(data.matrix(expData.subset.sel.z))
View(expData.subset.sel)
View(expData.subset.sel.z)
head(expData.subset.sel.median)
median(expData.subset.sel.z[1,])
median(as.numeric(expData.subset.sel.z[1,])
)
median(as.numeric(expData.subset.sel.z[2,]))
expData.subset.sel.median <- as.data.frame(rowMedians(data.matrix(expData.subset.sel.z)))
head(expData.subset.sel.median)
rownames(expData.subset.sel.median) <- rownames(expData.subset.sel.z)
head(expData.subset.sel.median)
colnames(expData.subset.sel.median) <- target.sel
head(expData.subset.sel.median)
expData.subset.z <- cbind(expData.subset.z, expData.subset.sel.median)
head(expData.subset.z)
##### Perfrom Z-score transformation for each group
expData.subset.z <- annot
targets <- annData[,target]
for (i in 1:length(unique(targets))) {
##### Select samples from the group
target.sel <- unique(sort(targets, decreasing = TRUE))[i]
expData.subset.sel <- expData.subset[ targets %in%  target.sel ]
##### Perfrom Z-score transformation
expData.subset.sel.z <- as.data.frame(t(scale(data.matrix(t(expData.subset.sel)))))
##### Calculate the per-gene median for each group
expData.subset.sel.median <- as.data.frame(rowMedians(data.matrix(expData.subset.sel.z)))
rownames(expData.subset.sel.median) <- rownames(expData.subset.sel.z)
colnames(expData.subset.sel.median) <- target.sel
##### Create gene-annotated matrix with Z-score median values for each group
expData.subset.z <- cbind(expData.subset.z, expData.subset.sel.median)
}
head(expData.subset.z)
i
target.sel <- unique(sort(targets, decreasing = TRUE))[i]
target.sel
expData.subset.sel <- expData.subset[ targets %in%  target.sel ]
dim(expData.subset.sel)
hea(expData.subset.sel)
head(expData.subset.sel)
expData.subset.sel.z <- as.data.frame(t(scale(data.matrix(t(expData.subset.sel)))))
head(expData.subset.sel.z)
##### Perfrom Z-score transformation
expData.subset.z <- as.data.frame(t(scale(data.matrix(t(expData.subset)))))
head(expData.subset.z)
expData.subset.z.median <- annot
head(expData.subset.z.median)
i
targets
target.sel <- unique(sort(targets, decreasing = TRUE))[i]
target.sel
expData.subset.sel <- expData.subset[ targets %in%  target.sel ]
head(expData.subset.sel)
expData.subset.sel.median <- as.data.frame(rowMedians(data.matrix(expData.subset.sel)))
head(expData.subset.sel.median)
rownames(expData.subset.sel.median) <- rownames(expData.subset.sel.z)
colnames(expData.subset.sel.median) <- target.sel
head(expData.subset.sel.median)
expData.subset.z.median <- cbind(expData.subset.z.median, expData.subset.sel.median)
head(expData.subset.z.median)
##### Perfrom Z-score transformation
expData.subset.z <- as.data.frame(t(scale(data.matrix(t(expData.subset)))))
##### Calculate the per-gene median for each group
expData.subset.z.median <- annot
targets <- annData[,target]
for (i in 1:length(unique(targets))) {
##### Select samples from the group
target.sel <- unique(sort(targets, decreasing = TRUE))[i]
expData.subset.sel <- expData.subset[ targets %in%  target.sel ]
##### Calculate the per-gene median for each group
expData.subset.sel.median <- as.data.frame(rowMedians(data.matrix(expData.subset.sel)))
rownames(expData.subset.sel.median) <- rownames(expData.subset.sel.z)
colnames(expData.subset.sel.median) <- target.sel
##### Create gene-annotated matrix with Z-score median values for each group
expData.subset.z.median <- cbind(expData.subset.z.median, expData.subset.sel.median)
}
head(expData.subset.z.median)
setwd(outFolder)
##### Save the histogram as html (PLOTLY)
htmlwidgets::saveWidget(as_widget(p), paste0("norm_files/", expFile, "_perGroup_annotated_hist_",j,".html"))
##### Write the annotated expression data into a file
write.table(prepare2write(expData.annot), file=paste0("norm_files/", expFile, "_perGroup_annotated.csv"), sep="\t", row.names=FALSE)
##### Perfrom Z-score transformation
expData.subset.z <- as.data.frame(t(scale(data.matrix(t(expData.subset)))))
##### Generate histogram to get an idea about the relative linear copy-number values in the entire data
p <- plot_ly(x = ~unlist(expData.z), type = 'histogram', width = 800, height = 500) %>%
layout(xaxis = list( title = "Gene expression (Z-score)"), yaxis = list( title = "Frequency"), margin = list(l=50, r=50, b=50, t=50, pad=4), autosize = F)
##### Clear workspace
rm(list=ls())
##### Close any open graphics devices
graphics.off()
### Setting environment for pandoc
Sys.setenv(HOME = "")
#===============================================================================
#    Functions
#===============================================================================
##### Create 'not in' operator
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0
##### Prepare object to write into a file
prepare2write <- function (x) {
x2write <- cbind(rownames(x), x)
colnames(x2write) <- c("",colnames(x))
return(x2write)
}
##### Deal with the duplicated genes
duplGenes <- function(expData) {
genesList <- NULL
genesRepl <- NULL
for ( i in 1:nrow(expData) ) {
geneName <- expData[i,1]
##### Distingish duplicated genes by adding duplicate number
if ( geneName %in% genesList ) {
##### Report genes with more than one duplicates
if ( geneName %in% names(genesRepl) ) {
genesRepl[[ geneName ]] = genesRepl[[ geneName ]]+1
geneName <- paste(geneName, "-", genesRepl[[ geneName ]], sep="")
} else {
genesRepl[[ geneName ]] <- 2
geneName <- paste(geneName, "-2", sep="")
}
}
genesList <- c(genesList,geneName)
}
rownames(expData) <- genesList
##### Remove the first column with gene names, which now are used as row names
expData <- expData[, -1]
return(expData)
}
#===============================================================================
#    Load libraries
#===============================================================================
suppressMessages(library(plotly))
suppressMessages(library(Biobase))
suppressMessages(library(optparse))
suppressMessages(library(biomaRt))
expFile="gene_exp.csv"
annFile="cn_target.txt"
target="Target"
outFolder="/Users/marzec01/Desktop/git/PED_bioinformatics_portal/PED_Analytics/ped_backoffice/data/ccle"
exp_files = unlist(strsplit(expFile, ","))
##### Read sample annotation file
annData <- read.table( paste(outFolder,annFile,sep = "/"),sep="\t",as.is=TRUE,header=TRUE)
annData$Sample_Name <- make.names(annData$Sample_Name)
head(annData)
j=1
ef = paste(outFolder,"norm_files",exp_files[j],sep = "/")
##### Read file with expression data
expData <- read.table(ef,sep="\t",header=TRUE,row.names=NULL, stringsAsFactors = FALSE)
###### Deal with the duplicated genes
expData <- duplGenes(expData)
###### Check samples present in current dataset
selected_samples <- intersect(as.character(annData$Sample_Name),colnames(expData))
expData.subset <- expData[,colnames(expData) %in% selected_samples]
##### Make sure that the sample order is the same as in the target file
expData.subset <- expData.subset[ , selected_samples ]
targets <- subset(annData, Sample_Name %in% colnames(expData.subset))[,target]
##### Perfrom Z-score transformation
expData.z <- as.data.frame(t(scale(data.matrix(t(expData.subset)))))
head(expData.z)
##### Generate histogram to get an idea about the relative linear copy-number values in the entire data
p <- plot_ly(x = ~unlist(expData.z), type = 'histogram', width = 800, height = 500) %>%
layout(xaxis = list( title = "Gene expression (Z-score)"), yaxis = list( title = "Frequency"), margin = list(l=50, r=50, b=50, t=50, pad=4), autosize = F)
mart = useMart(biomart = "ENSEMBL_MART_ENSEMBL",dataset="hsapiens_gene_ensembl",host = "jul2015.archive.ensembl.org")
p
###### Set filters and attributes for BioMart
theFilters = c("hgnc_symbol", "chromosome_name")
theAttributes = c("hgnc_symbol", "chromosome_name","start_position","end_position")
###### Retrieve the gene annotation
annot <- getBM(attributes=theAttributes,filters=theFilters,values=list(rownames(expData.z), c(1:22,"X","Y")),mart=mart)
###### remove duplicated genes
annot <- annot[!duplicated(annot["hgnc_symbol"]),]
###### Get genes present in the data and annotation object
annot_genes <- intersect(annot$hgnc_symbol,rownames(expData.z))
###### Set filters and attributes for BioMart
theFilters = c("hgnc_symbol", "chromosome_name")
theAttributes = c("hgnc_symbol", "chromosome_name","start_position","end_position")
###### Retrieve the gene annotation
annot <- getBM(attributes=theAttributes,filters=theFilters,values=list(rownames(expData.z), c(1:22,"X","Y")),mart=mart)
###### remove duplicated genes
annot <- annot[!duplicated(annot["hgnc_symbol"]),]
###### Get genes present in the data and annotation object
annot_genes <- intersect(annot$hgnc_symbol,rownames(expData.z))
expData.z <- expData.z[rownames(expData.z) %in% annot_genes, ]
annot <- annot[ annot$hgnc_symbol %in% annot_genes, ]
rownames(annot) <- annot$hgnc_symbol
annot <- annot[,-1]
expData.z <- expData.z[ rownames(annot), ]
head(expData.z)
expData.z.median <- annot
targets <- annData[,target]
head(expData.z.median)
targets
i=1
##### Select samples from the group
target.sel <- unique(sort(targets, decreasing = TRUE))[i]
expData.z.sel <- expData.z[ targets %in%  target.sel ]
dim(expData.z.sel)
expData.z.sel.median <- as.data.frame(rowMedians(data.matrix(expData.z.sel)))
rownames(expData.z.sel.median) <- rownames(expData.z.sel.median)
colnames(expData.z.sel.median) <- target.sel
head(expData.z.sel.median)
expData.z.median <- cbind(expData.z.median, expData.z.sel.median)
setwd(outFolder)
##### Save the histogram as html (PLOTLY)
htmlwidgets::saveWidget(as_widget(p), paste0("norm_files/", expFile, "_perGroup_annotated_hist_",j,".html"))
##### Write the annotated expression data into a file
write.table(prepare2write(expData.z.median), file=paste0("norm_files/", expFile, "_perGroup_annotated.csv"), sep="\t", row.names=FALSE)
##### Write the annotated expression data into a file
write.table(prepare2write(expData.z.median), file=paste0("norm_files/", expFile, "_perGroup_annotated.txt"), sep="\t", row.names=FALSE)
paste0("norm_files/", expFile, "_perGroup_annotated_hist_",j,".html")
getwd()
htmlwidgets::saveWidget(as_widget(p), paste0("norm_files/", expFile, "_perGroup_annotated_hist_",j,".html"))
htmlwidgets::saveWidget(as_widget(p), paste0("/norm_files/", expFile, "_perGroup_annotated_hist_",j,".html"))
paste0("norm_files/", expFile, "_perGroup_annotated_hist_",j,".html")
htmlwidgets::saveWidget(as_widget(p), paste0(outFolder,"/norm_files/", expFile, "_perGroup_annotated_hist_",j,".html"))
##### Clear workspace
rm(list=ls())
##### Close any open graphics devices
graphics.off()
### Setting environment for pandoc
Sys.setenv(HOME = "")
#===============================================================================
#    Functions
#===============================================================================
##### Create 'not in' operator
"%!in%" <- function(x,table) match(x,table, nomatch = 0) == 0
##### Prepare object to write into a file
prepare2write <- function (x) {
x2write <- cbind(rownames(x), x)
colnames(x2write) <- c("",colnames(x))
return(x2write)
}
##### Deal with the duplicated genes
duplGenes <- function(expData) {
genesList <- NULL
genesRepl <- NULL
for ( i in 1:nrow(expData) ) {
geneName <- expData[i,1]
##### Distingish duplicated genes by adding duplicate number
if ( geneName %in% genesList ) {
##### Report genes with more than one duplicates
if ( geneName %in% names(genesRepl) ) {
genesRepl[[ geneName ]] = genesRepl[[ geneName ]]+1
geneName <- paste(geneName, "-", genesRepl[[ geneName ]], sep="")
} else {
genesRepl[[ geneName ]] <- 2
geneName <- paste(geneName, "-2", sep="")
}
}
genesList <- c(genesList,geneName)
}
rownames(expData) <- genesList
##### Remove the first column with gene names, which now are used as row names
expData <- expData[, -1]
return(expData)
}
#===============================================================================
#    Load libraries
#===============================================================================
suppressMessages(library(plotly))
suppressMessages(library(Biobase))
suppressMessages(library(optparse))
suppressMessages(library(biomaRt))
expFile="43288_1.processed.genename.csv,43288_2.processed.genename.csv"
annFile="target.txt"
target="Target"
outFolder="/Users/marzec01/Desktop/git/PED_bioinformatics_portal/PED_Analytics/ped_backoffice/data/E-GEOD-43288_23372777"
exp_files = unlist(strsplit(expFile, ","))
##### Read sample annotation file
annData <- read.table( paste(outFolder,annFile,sep = "/"),sep="\t",as.is=TRUE,header=TRUE)
annData$File_name <- make.names(annData$File_name)
head(annData)
dim(annData)
j=1
ef = paste(outFolder,"norm_files",exp_files[j],sep = "/")
##### Read file with expression data
expData <- read.table(ef,sep="\t",header=TRUE,row.names=NULL, stringsAsFactors = FALSE)
###### Deal with the duplicated genes
expData <- duplGenes(expData)
dim(expData)
head(expData)
selected_samples <- intersect(as.character(annData$File_name),colnames(expData))
selected_samples
expData.subset <- expData[,colnames(expData) %in% selected_samples]
dim(expData.subset)
head(expData.subset)
expData.subset <- expData.subset[ , selected_samples ]
targets <- subset(annData, File_name %in% colnames(expData.subset))[,target]
head(expData.subset)
dim(expData.subset)
targets
expData.z <- as.data.frame(t(scale(data.matrix(t(expData.subset)))))
head(expData.z)
p <- plot_ly(x = ~unlist(expData.z), type = 'histogram', width = 800, height = 500) %>%
layout(xaxis = list( title = "Gene expression (Z-score)"), yaxis = list( title = "Frequency"), margin = list(l=50, r=50, b=50, t=50, pad=4), autosize = F)
##### Save the histogram as html (PLOTLY)
htmlwidgets::saveWidget(as_widget(p), paste0(outFolder,"/norm_files/", expFile, "_perGroup_annotated_hist_",j,".html"))
mart = useMart(biomart = "ENSEMBL_MART_ENSEMBL",dataset="hsapiens_gene_ensembl",host = "jul2015.archive.ensembl.org")
theFilters = c("hgnc_symbol", "chromosome_name")
theAttributes = c("hgnc_symbol", "chromosome_name","start_position","end_position")
###### Retrieve the gene annotation
annot <- getBM(attributes=theAttributes,filters=theFilters,values=list(rownames(expData.z), c(1:22,"X","Y")),mart=mart)
annot <- annot[!duplicated(annot["hgnc_symbol"]),]
###### Get genes present in the data and annotation object
annot_genes <- intersect(annot$hgnc_symbol,rownames(expData.z))
expData.z <- expData.z[rownames(expData.z) %in% annot_genes, ]
annot <- annot[ annot$hgnc_symbol %in% annot_genes, ]
rownames(annot) <- annot$hgnc_symbol
annot <- annot[,-1]
head(annot)
dim(annot)
dim(expData.z)
expData.z <- expData.z[ rownames(annot), ]
head(expData.z)
expData.z.median <- annot
targets <- annData[,target]
targets
targets <- subset(annData, File_name %in% colnames(expData.subset))[,target]
targets
i=1
target.sel <- unique(sort(targets, decreasing = TRUE))[i]
expData.z.sel <- expData.z[ targets %in%  target.sel ]
##### Calculate the per-gene median for each group
expData.z.sel.median <- as.data.frame(rowMedians(data.matrix(expData.z.sel)))
rownames(expData.z.sel.median) <- rownames(expData.z.sel.median)
colnames(expData.z.sel.median) <- target.sel
##### Create gene-annotated matrix with Z-score median values for each group
expData.z.median <- cbind(expData.z.median, expData.z.sel.median)
head(expData.z.median)
q()
